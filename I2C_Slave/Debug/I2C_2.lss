
I2C_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000030ae  00003142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800094  00800094  00003176  2**0
                  ALLOC
  3 .stab         00004248  00000000  00000000  00003178  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000296b  00000000  00000000  000073c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bc24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cb0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d8bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000da1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e477  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_1>
       8:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__vector_2>
       c:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <main>
      8a:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 46 18 	jmp	0x308c	; 0x308c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_VoidInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void UART_VoidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

	//u8 UCSRC_Data =0;
	UCSRC_REG_Data DATA ;
	DIO_voidSetPinDirection(PORTD_ID,PIN0,PIN_INPUT);
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD_ID,PIN1,PIN_OUTPUT);
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>

	/*   TO SELECT BAUD RATE   */
	UBRRL_REG = ( (u32)(F_OSC * 1000000) /((u32)16 * UART_BAUD_RATE)) - 1 ;
     b64:	e9 e2       	ldi	r30, 0x29	; 41
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	83 e3       	ldi	r24, 0x33	; 51
     b6a:	80 83       	st	Z, r24

	DATA.UCSRC_UPM =UART_PARITY_MODE ;
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	87 7e       	andi	r24, 0xE7	; 231
     b70:	89 83       	std	Y+1, r24	; 0x01
	DATA.UCSRC_UCPOL=UART_NUM_STOP_BIT ;
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	89 83       	std	Y+1, r24	; 0x01
	/***********************************************/

	/***********************************************/

	/* TO SELECT CHARACTER SIZE -> 8 BITS */
	DATA.UCSRC_UCSZ=0b11 ;
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	86 60       	ori	r24, 0x06	; 6
     b7c:	89 83       	std	Y+1, r24	; 0x01
	UCSRB_REG->UCSRB_UCSZ2=0b0 ;
     b7e:	ea e2       	ldi	r30, 0x2A	; 42
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8b 7f       	andi	r24, 0xFB	; 251
     b86:	80 83       	st	Z, r24


	/***** Write data in UCSRC_REG in one time ***********/
	DATA.UCSRC_URSEL=ONE ;
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	80 64       	ori	r24, 0x40	; 64
     b8c:	89 83       	std	Y+1, r24	; 0x01
	UCSRC_REG  = DATA.BYTE ;
     b8e:	e0 e4       	ldi	r30, 0x40	; 64
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	80 83       	st	Z, r24

	/* TO ENABLE RX CIRCUIT */
	UCSRB_REG->UCSRB_RXEN =ONE  ;
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 61       	ori	r24, 0x10	; 16
     b9e:	80 83       	st	Z, r24


	/* TO ENABLE TX CIRCUIT */
	UCSRB_REG->UCSRB_TXEN =ONE  ;
     ba0:	ea e2       	ldi	r30, 0x2A	; 42
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	88 60       	ori	r24, 0x08	; 8
     ba8:	80 83       	st	Z, r24

}
     baa:	0f 90       	pop	r0
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <UART_VoidSendChar>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
UART_ERROR UART_VoidSendChar(u8 Copy_U8_Data)
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <UART_VoidSendChar+0x6>
     bb8:	00 d0       	rcall	.+0      	; 0xbba <UART_VoidSendChar+0x8>
     bba:	00 d0       	rcall	.+0      	; 0xbbc <UART_VoidSendChar+0xa>
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	8e 83       	std	Y+6, r24	; 0x06
	/* while(GET_BIT(UCSRA_REG,UCSRA_UDRE_BIT) ==0);
			UDR_REG = Copy_U8_Data; */
	u32 Local_U32_Counter = 0;
     bc2:	1a 82       	std	Y+2, r1	; 0x02
     bc4:	1b 82       	std	Y+3, r1	; 0x03
     bc6:	1c 82       	std	Y+4, r1	; 0x04
     bc8:	1d 82       	std	Y+5, r1	; 0x05
	UART_ERROR Send_check_ERROR=UART_NO_ERROR ;
     bca:	19 82       	std	Y+1, r1	; 0x01
     bcc:	16 c0       	rjmp	.+44     	; 0xbfa <UART_VoidSendChar+0x48>

	while(Local_U32_Counter <= UART_POLLING_TIME)
	{
		Local_U32_Counter++;
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	9b 81       	ldd	r25, Y+3	; 0x03
     bd2:	ac 81       	ldd	r26, Y+4	; 0x04
     bd4:	bd 81       	ldd	r27, Y+5	; 0x05
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	a1 1d       	adc	r26, r1
     bda:	b1 1d       	adc	r27, r1
     bdc:	8a 83       	std	Y+2, r24	; 0x02
     bde:	9b 83       	std	Y+3, r25	; 0x03
     be0:	ac 83       	std	Y+4, r26	; 0x04
     be2:	bd 83       	std	Y+5, r27	; 0x05
		if( (UCSRA_REG->UCSRA_UDRE) == UART_FINISHED_TRANSMITTING)
     be4:	eb e2       	ldi	r30, 0x2B	; 43
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 72       	andi	r24, 0x20	; 32
     bec:	88 23       	and	r24, r24
     bee:	29 f0       	breq	.+10     	; 0xbfa <UART_VoidSendChar+0x48>
		{
			UDR_REG = Copy_U8_Data;
     bf0:	ec e2       	ldi	r30, 0x2C	; 44
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	80 83       	st	Z, r24
     bf8:	0c c0       	rjmp	.+24     	; 0xc12 <UART_VoidSendChar+0x60>
	/* while(GET_BIT(UCSRA_REG,UCSRA_UDRE_BIT) ==0);
			UDR_REG = Copy_U8_Data; */
	u32 Local_U32_Counter = 0;
	UART_ERROR Send_check_ERROR=UART_NO_ERROR ;

	while(Local_U32_Counter <= UART_POLLING_TIME)
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	ac 81       	ldd	r26, Y+4	; 0x04
     c00:	bd 81       	ldd	r27, Y+5	; 0x05
     c02:	81 3d       	cpi	r24, 0xD1	; 209
     c04:	27 e0       	ldi	r18, 0x07	; 7
     c06:	92 07       	cpc	r25, r18
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	a2 07       	cpc	r26, r18
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	b2 07       	cpc	r27, r18
     c10:	f0 f2       	brcs	.-68     	; 0xbce <UART_VoidSendChar+0x1c>
		{
			UDR_REG = Copy_U8_Data;
			break;
		}
	}
	if(Local_U32_Counter == UART_POLLING_TIME)
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	9b 81       	ldd	r25, Y+3	; 0x03
     c16:	ac 81       	ldd	r26, Y+4	; 0x04
     c18:	bd 81       	ldd	r27, Y+5	; 0x05
     c1a:	80 3d       	cpi	r24, 0xD0	; 208
     c1c:	27 e0       	ldi	r18, 0x07	; 7
     c1e:	92 07       	cpc	r25, r18
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	a2 07       	cpc	r26, r18
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	b2 07       	cpc	r27, r18
     c28:	11 f4       	brne	.+4      	; 0xc2e <UART_VoidSendChar+0x7c>
	{
		Send_check_ERROR=UART_TIME_OUT_ERROR ;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	89 83       	std	Y+1, r24	; 0x01
	}

	return  Send_check_ERROR ;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01


}
     c30:	26 96       	adiw	r28, 0x06	; 6
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <UART_VoidSendString>:
void UART_VoidSendString(u8* PO_U8_Data)
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	00 d0       	rcall	.+0      	; 0xc48 <UART_VoidSendString+0x6>
     c48:	0f 92       	push	r0
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	9b 83       	std	Y+3, r25	; 0x03
     c50:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0 ;
     c52:	19 82       	std	Y+1, r1	; 0x01
     c54:	0e c0       	rjmp	.+28     	; 0xc72 <UART_VoidSendString+0x30>

	while(PO_U8_Data[count] !='\0')
	{
		UART_VoidSendChar(PO_U8_Data[count]);
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	fc 01       	movw	r30, r24
     c62:	e2 0f       	add	r30, r18
     c64:	f3 1f       	adc	r31, r19
     c66:	80 81       	ld	r24, Z
     c68:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <UART_VoidSendChar>
		count ++ ;
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	89 83       	std	Y+1, r24	; 0x01
}
void UART_VoidSendString(u8* PO_U8_Data)
{
	u8 count=0 ;

	while(PO_U8_Data[count] !='\0')
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	fc 01       	movw	r30, r24
     c7e:	e2 0f       	add	r30, r18
     c80:	f3 1f       	adc	r31, r19
     c82:	80 81       	ld	r24, Z
     c84:	88 23       	and	r24, r24
     c86:	39 f7       	brne	.-50     	; 0xc56 <UART_VoidSendString+0x14>
		UART_VoidSendChar(PO_U8_Data[count]);
		count ++ ;
	}


}
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <UART_VoidReceiveString>:

void UART_VoidReceiveString(u8* PO_U8_Data)
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	00 d0       	rcall	.+0      	; 0xc9a <UART_VoidReceiveString+0x6>
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <UART_VoidReceiveString+0x8>
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9c 83       	std	Y+4, r25	; 0x04
     ca2:	8b 83       	std	Y+3, r24	; 0x03
	s8 count= -1 ;
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	8a 83       	std	Y+2, r24	; 0x02

	u8 c=0 ;
     ca8:	19 82       	std	Y+1, r1	; 0x01
     caa:	0c c0       	rjmp	.+24     	; 0xcc4 <UART_VoidReceiveString+0x30>
	for( ; c!=10 ; c++)
	{
		PO_U8_Data[c]=0 ;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	9c 81       	ldd	r25, Y+4	; 0x04
     cb6:	fc 01       	movw	r30, r24
     cb8:	e2 0f       	add	r30, r18
     cba:	f3 1f       	adc	r31, r19
     cbc:	10 82       	st	Z, r1
void UART_VoidReceiveString(u8* PO_U8_Data)
{
	s8 count= -1 ;

	u8 c=0 ;
	for( ; c!=10 ; c++)
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	8a 30       	cpi	r24, 0x0A	; 10
     cc8:	89 f7       	brne	.-30     	; 0xcac <UART_VoidReceiveString+0x18>
	{
		PO_U8_Data[c]=0 ;
	}
	do
	{
		count ++ ;
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	8a 83       	std	Y+2, r24	; 0x02
		UART_U8ReceiveChar(&PO_U8_Data[count]);
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	33 27       	eor	r19, r19
     cd6:	27 fd       	sbrc	r18, 7
     cd8:	30 95       	com	r19
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	0e 94 87 06 	call	0xd0e	; 0xd0e <UART_U8ReceiveChar>

	}while(PO_U8_Data[count] !='#');
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	28 2f       	mov	r18, r24
     cea:	33 27       	eor	r19, r19
     cec:	27 fd       	sbrc	r18, 7
     cee:	30 95       	com	r19
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	fc 01       	movw	r30, r24
     cf6:	e2 0f       	add	r30, r18
     cf8:	f3 1f       	adc	r31, r19
     cfa:	80 81       	ld	r24, Z
     cfc:	83 32       	cpi	r24, 0x23	; 35
     cfe:	29 f7       	brne	.-54     	; 0xcca <UART_VoidReceiveString+0x36>



}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <UART_U8ReceiveChar>:
/*------------------------------------------------------------------------------------*/
/*   FUNCTION BODY                                                                    */
/*------------------------------------------------------------------------------------*/

UART_ERROR UART_U8ReceiveChar(u8 *copy_p8_Data )
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <UART_U8ReceiveChar+0x6>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	9b 83       	std	Y+3, r25	; 0x03
     d1c:	8a 83       	std	Y+2, r24	; 0x02
	UART_ERROR Send_check_ERROR=UART_NO_ERROR ;
     d1e:	19 82       	std	Y+1, r1	; 0x01
	//	while( (UCSRA_REG->UCSRA_RXC) == ZERO);
	//	*copy_p8_Data= UDR_REG ;
	//	return Send_check_ERROR;

	if((UCSRA_REG->UCSRA_RXC) == 1)
     d20:	eb e2       	ldi	r30, 0x2B	; 43
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 78       	andi	r24, 0x80	; 128
     d28:	88 23       	and	r24, r24
     d2a:	39 f0       	breq	.+14     	; 0xd3a <UART_U8ReceiveChar+0x2c>
	{
		*copy_p8_Data= UDR_REG ;
     d2c:	ec e2       	ldi	r30, 0x2C	; 44
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	ea 81       	ldd	r30, Y+2	; 0x02
     d34:	fb 81       	ldd	r31, Y+3	; 0x03
     d36:	80 83       	st	Z, r24
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <UART_U8ReceiveChar+0x30>
	}
	else
	{
		Send_check_ERROR=1 ;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Send_check_ERROR;
     d3e:	89 81       	ldd	r24, Y+1	; 0x01

			return  Send_check_ERROR ;
	 */


}
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <TIMER2_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER2_VoidInit(void)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62


/**************************************/
#elif  MOOD2==PWM2_MOOD
/**************************************/
	TCCR2_REG->TCCR2_WGM00=1;
     d54:	e5 e4       	ldi	r30, 0x45	; 69
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 64       	ori	r24, 0x40	; 64
     d5c:	80 83       	st	Z, r24
	TCCR2_REG->TCCR2_WGM01=1;
     d5e:	e5 e4       	ldi	r30, 0x45	; 69
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	88 60       	ori	r24, 0x08	; 8
     d66:	80 83       	st	Z, r24

	TCCR2_REG->TCCR2_COM = PWM2_COMPARE_MATCH;
     d68:	e5 e4       	ldi	r30, 0x45	; 69
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8f 7c       	andi	r24, 0xCF	; 207
     d70:	80 62       	ori	r24, 0x20	; 32
     d72:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <TIMER2_VoidStop>:

/*****************************************************************************/
void TIMER2_VoidStop(void)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	TCCR2_REG->TCCR2_CS0=No2_FREQ;
     d82:	e5 e4       	ldi	r30, 0x45	; 69
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	88 7f       	andi	r24, 0xF8	; 248
     d8a:	80 83       	st	Z, r24

}
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <TIMER2_VoidStart>:


/*****************************************************************************/
void TIMER2_VoidStart(void)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62

	TCCR2_REG->TCCR2_CS0=PRESCALER2;
     d9a:	e5 e4       	ldi	r30, 0x45	; 69
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	88 7f       	andi	r24, 0xF8	; 248
     da2:	84 60       	ori	r24, 0x04	; 4
     da4:	80 83       	st	Z, r24

}
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <TIMER2_VoidSetPreload>:

/*****************************************************************************/
void TIMER2_VoidSetPreload(u8 copy_u8PRELOAD )
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	89 83       	std	Y+1, r24	; 0x01

	TCNT2_REG=copy_u8PRELOAD;
     db8:	e4 e4       	ldi	r30, 0x44	; 68
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	80 83       	st	Z, r24
}
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <TIMER2_VoidVal>:

/*****************************************************************************/

u8 TIMER2_VoidVal(void )
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62

	return  TCNT2_REG ;
     dd0:	e4 e4       	ldi	r30, 0x44	; 68
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <TIMER2_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER2_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	0f 92       	push	r0
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	89 83       	std	Y+1, r24	; 0x01
#if PWM_COMPARE_MATCH == CLEAR_ON_COMPARE_MATCH_SET_ON_TOP
	//OCR2_REG =   ( ( (f32)copy_u8Val / 100 ) * (255) );
	  OCR2_REG =   ( ( (u32)copy_u8Val * 255 ) / (100) );
     dec:	03 e4       	ldi	r16, 0x43	; 67
     dee:	10 e0       	ldi	r17, 0x00	; 0
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a0 e0       	ldi	r26, 0x00	; 0
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	2f ef       	ldi	r18, 0xFF	; 255
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__mulsi3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	24 e6       	ldi	r18, 0x64	; 100
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	bc 01       	movw	r22, r24
     e18:	cd 01       	movw	r24, r26
     e1a:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodsi4>
     e1e:	da 01       	movw	r26, r20
     e20:	c9 01       	movw	r24, r18
     e22:	f8 01       	movw	r30, r16
     e24:	80 83       	st	Z, r24

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR2_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR2_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	08 95       	ret

00000e32 <M_TIMER1_voidPwm1Init>:
#include "TIMER1_config.h"



void M_TIMER1_voidPwm1Init(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	/* to enable output circuit for PD5 pin */

	DIO_voidSetPinDirection(PORTD_ID,PIN5,PIN_OUTPUT);
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	65 e0       	ldi	r22, 0x05	; 5
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>

	/* to select mode 14 in table 47 */
	CLR_BIT(TCCR1A_REG,WGM10);
     e44:	af e4       	ldi	r26, 0x4F	; 79
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8e 7f       	andi	r24, 0xFE	; 254
     e50:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,WGM11);
     e52:	af e4       	ldi	r26, 0x4F	; 79
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e4       	ldi	r30, 0x4F	; 79
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	82 60       	ori	r24, 0x02	; 2
     e5e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM12);
     e60:	ae e4       	ldi	r26, 0x4E	; 78
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ee e4       	ldi	r30, 0x4E	; 78
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 60       	ori	r24, 0x08	; 8
     e6c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,WGM13);
     e6e:	ae e4       	ldi	r26, 0x4E	; 78
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ee e4       	ldi	r30, 0x4E	; 78
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 61       	ori	r24, 0x10	; 16
     e7a:	8c 93       	st	X, r24

	/* to select non inverting mode */
	SET_BIT(TCCR1A_REG,COM1A1);
     e7c:	af e4       	ldi	r26, 0x4F	; 79
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ef e4       	ldi	r30, 0x4F	; 79
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,COM1A0);
     e8a:	af e4       	ldi	r26, 0x4F	; 79
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ef e4       	ldi	r30, 0x4F	; 79
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8f 7b       	andi	r24, 0xBF	; 191
     e96:	8c 93       	st	X, r24
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <M_TIMER1_voidPwm1SetTop>:
void M_TIMER1_voidPwm1SetTop(void)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	//to make TIMER at 20ms top  when PRESCALER = 256  at  8M F
	ICR1_REG=625;
     ea6:	e6 e4       	ldi	r30, 0x46	; 70
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	81 e7       	ldi	r24, 0x71	; 113
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	80 83       	st	Z, r24
}
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <M_TIMER1_voidPwm1SetDutyCycle>:
void M_TIMER1_voidPwm1SetDutyCycle(u16 Copy_u8DutyCycle)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <M_TIMER1_voidPwm1SetDutyCycle+0x6>
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
	// pass num between 25 and 65
	OCR1A_REG=Copy_u8DutyCycle ;
     ec6:	ea e4       	ldi	r30, 0x4A	; 74
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	80 83       	st	Z, r24

}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <M_TIMER1_voidPwm1Start>:
void M_TIMER1_voidPwm1Start(void)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
#if   TIMER1_PRESCALER   ==   1024
	SET_BIT(TCCR1B_REG,CS10);
	CLR_BIT(TCCR1B_REG,CS11);
	SET_BIT(TCCR1B_REG,CS12);
#elif TIMER1_PRESCALER   ==   256
	CLR_BIT(TCCR1B_REG,CS10);
     ee4:	ae e4       	ldi	r26, 0x4E	; 78
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	ee e4       	ldi	r30, 0x4E	; 78
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8e 7f       	andi	r24, 0xFE	; 254
     ef0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
     ef2:	ae e4       	ldi	r26, 0x4E	; 78
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	ee e4       	ldi	r30, 0x4E	; 78
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8d 7f       	andi	r24, 0xFD	; 253
     efe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,CS12);
     f00:	ae e4       	ldi	r26, 0x4E	; 78
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	ee e4       	ldi	r30, 0x4E	; 78
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	84 60       	ori	r24, 0x04	; 4
     f0c:	8c 93       	st	X, r24
#endif
}
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <M_TIMER1_voidPwm1Stop>:
void M_TIMER1_voidPwm1Stop(void)
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B_REG,CS10);
     f1c:	ae e4       	ldi	r26, 0x4E	; 78
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	ee e4       	ldi	r30, 0x4E	; 78
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8e 7f       	andi	r24, 0xFE	; 254
     f28:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11);
     f2a:	ae e4       	ldi	r26, 0x4E	; 78
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ee e4       	ldi	r30, 0x4E	; 78
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8d 7f       	andi	r24, 0xFD	; 253
     f36:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS12);
     f38:	ae e4       	ldi	r26, 0x4E	; 78
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ee e4       	ldi	r30, 0x4E	; 78
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8b 7f       	andi	r24, 0xFB	; 251
     f44:	8c 93       	st	X, r24
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <TIMER0_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER0_VoidInit(void)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62


/**************************************/
#elif  MOOD==PWM_MOOD
/**************************************/
	DIO_voidSetPinDirection(PORTB_ID,PIN3,PIN_OUTPUT);
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	63 e0       	ldi	r22, 0x03	; 3
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
	TCCR0_REG->TCCR0_WGM00=1;
     f5e:	e3 e5       	ldi	r30, 0x53	; 83
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 64       	ori	r24, 0x40	; 64
     f66:	80 83       	st	Z, r24
	TCCR0_REG->TCCR0_WGM01=1;
     f68:	e3 e5       	ldi	r30, 0x53	; 83
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	88 60       	ori	r24, 0x08	; 8
     f70:	80 83       	st	Z, r24

	TCCR0_REG->TCCR0_COM = PWM_COMPARE_MATCH;
     f72:	e3 e5       	ldi	r30, 0x53	; 83
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 7c       	andi	r24, 0xCF	; 207
     f7a:	80 62       	ori	r24, 0x20	; 32
     f7c:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <TIMER0_VoidStop>:

/*****************************************************************************/
void TIMER0_VoidStop(void)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->TCCR0_CS0=No_FREQ;
     f8c:	e3 e5       	ldi	r30, 0x53	; 83
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	80 83       	st	Z, r24

}
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <TIMER0_VoidStart>:


/*****************************************************************************/
void TIMER0_VoidStart(void)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG->TCCR0_CS0=PRESCALER;
     fa4:	e3 e5       	ldi	r30, 0x53	; 83
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	88 7f       	andi	r24, 0xF8	; 248
     fac:	84 60       	ori	r24, 0x04	; 4
     fae:	80 83       	st	Z, r24

}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <TIMER0_VoidSetPreload>:

/*****************************************************************************/
void TIMER0_VoidSetPreload(u8 copy_u8PRELOAD )
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	89 83       	std	Y+1, r24	; 0x01

	TCNT0_REG=copy_u8PRELOAD;
     fc2:	e2 e5       	ldi	r30, 0x52	; 82
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	80 83       	st	Z, r24
}
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <TIMER0_VoidVal>:

/*****************************************************************************/

u8 TIMER0_VoidVal(void )
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62

	return  TCNT0_REG ;
     fda:	e2 e5       	ldi	r30, 0x52	; 82
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <TIMER0_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER0_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	89 83       	std	Y+1, r24	; 0x01
#if PWM_COMPARE_MATCH == CLEAR_ON_COMPARE_MATCH_SET_ON_TOP
	//OCR0_REG =   ( ( (f32)copy_u8Val / 100 ) * (255) );
	  OCR0_REG =   ( ( (u32)copy_u8Val * 255 ) / (100) );
     ff6:	0c e5       	ldi	r16, 0x5C	; 92
     ff8:	10 e0       	ldi	r17, 0x00	; 0
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	2f ef       	ldi	r18, 0xFF	; 255
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__mulsi3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	24 e6       	ldi	r18, 0x64	; 100
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodsi4>
    1028:	da 01       	movw	r26, r20
    102a:	c9 01       	movw	r24, r18
    102c:	f8 01       	movw	r30, r16
    102e:	80 83       	st	Z, r24

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR0_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR0_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	08 95       	ret

0000103c <WDT_VoidEnabel>:

/*
 * watch dog timer IN TIMER_1
 */
void WDT_VoidEnabel(void )
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62

	//SET_BIT(WDTCR_,3);
	WDTCR_REG->WDTCR_WDE=1;
    1044:	e1 e4       	ldi	r30, 0x41	; 65
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 60       	ori	r24, 0x08	; 8
    104c:	80 83       	st	Z, r24
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <WDT_VoidDisEnabel>:

void WDT_VoidDisEnabel(void )
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
//	WDTCR_==(1<<4)|(1<<3);
//	WDTCR_=0 ;

WDTCR_REG->WDTCR_Data=(1<<4)|(1<<3);
    105c:	e1 e4       	ldi	r30, 0x41	; 65
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	88 e1       	ldi	r24, 0x18	; 24
    1062:	80 83       	st	Z, r24
WDTCR_REG->WDTCR_WDE=0;
    1064:	e1 e4       	ldi	r30, 0x41	; 65
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	87 7f       	andi	r24, 0xF7	; 247
    106c:	80 83       	st	Z, r24
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <WDT_VoidSleep>:
void WDT_VoidSleep(u8 sleep_time )
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	89 83       	std	Y+1, r24	; 0x01

	//WDTCR_=(WDTCR_&0xF8) |sleep_time ;

	WDTCR_REG->WDTCR_WDP=sleep_time;
    1080:	e1 e4       	ldi	r30, 0x41	; 65
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	87 70       	andi	r24, 0x07	; 7
    1088:	98 2f       	mov	r25, r24
    108a:	97 70       	andi	r25, 0x07	; 7
    108c:	80 81       	ld	r24, Z
    108e:	88 7f       	andi	r24, 0xF8	; 248
    1090:	89 2b       	or	r24, r25
    1092:	80 83       	st	Z, r24

}
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <SPI_voidInit>:
#include "SPI_Interface.h"
#include "SPI_config.h"
#include "SPI_Private.h"
/********************************************************************************************/
void SPI_voidInit(void)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTB_ID,PIN7,PIN_OUTPUT);


#elif SPI_MODE   ==   SPI_SLAVE_MODE
     //SLAVE_MODE
	CLR_BIT(SPCR_REG,SPCR_MSTR);
    10a4:	ad e2       	ldi	r26, 0x2D	; 45
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	ed e2       	ldi	r30, 0x2D	; 45
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	8f 7e       	andi	r24, 0xEF	; 239
    10b0:	8c 93       	st	X, r24

	DIO_voidSetPinDirection(PORTB_ID,PIN4,PIN_INPUT);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	64 e0       	ldi	r22, 0x04	; 4
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN5,PIN_INPUT);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	65 e0       	ldi	r22, 0x05	; 5
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN6,PIN_OUTPUT);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	66 e0       	ldi	r22, 0x06	; 6
    10ca:	41 e0       	ldi	r20, 0x01	; 1
    10cc:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN7,PIN_INPUT);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	67 e0       	ldi	r22, 0x07	; 7
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>

#endif
	/* to send from LSB first */
	SET_BIT(SPCR_REG,SPCR_DORD);
    10da:	ad e2       	ldi	r26, 0x2D	; 45
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ed e2       	ldi	r30, 0x2D	; 45
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 62       	ori	r24, 0x20	; 32
    10e6:	8c 93       	st	X, r24
	/* to enable spi circuit */
	SET_BIT(SPCR_REG,SPCR_SPE);
    10e8:	ad e2       	ldi	r26, 0x2D	; 45
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ed e2       	ldi	r30, 0x2D	; 45
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	80 64       	ori	r24, 0x40	; 64
    10f4:	8c 93       	st	X, r24
}
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <SPI_voidTransiver>:

/********************************************************************************************/
u8   SPI_voidTransiver(u8 Copy_u8Data)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <SPI_voidTransiver+0x6>
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	8a 83       	std	Y+2, r24	; 0x02
	u8 data =0;
    1108:	19 82       	std	Y+1, r1	; 0x01
	SPDR_REG = Copy_u8Data;
    110a:	ef e2       	ldi	r30, 0x2F	; 47
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	80 83       	st	Z, r24

	//while(GET_BIT(SPSR_REG,SPSR_SPIF) == 0);
	if(GET_BIT(SPSR_REG,SPSR_SPIF) == 1)
    1112:	ee e2       	ldi	r30, 0x2E	; 46
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	88 1f       	adc	r24, r24
    111a:	88 27       	eor	r24, r24
    111c:	88 1f       	adc	r24, r24
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	21 f4       	brne	.+8      	; 0x112a <SPI_voidTransiver+0x2e>
	{
		data=SPDR_REG;
    1122:	ef e2       	ldi	r30, 0x2F	; 47
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	89 83       	std	Y+1, r24	; 0x01
	}
	return data;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <SPI_voidReceiveChar>:

void SPI_voidReceiveChar(u8 *Copy_u8Data)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <SPI_voidReceiveChar+0x6>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9a 83       	std	Y+2, r25	; 0x02
    1142:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(SPSR_REG,SPSR_SPIF) == 0);
    1144:	ee e2       	ldi	r30, 0x2E	; 46
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	88 23       	and	r24, r24
    114c:	dc f7       	brge	.-10     	; 0x1144 <SPI_voidReceiveChar+0xe>
	//if(GET_BIT(SPSR_REG,SPSR_SPIF) == 1)
	{
		*Copy_u8Data=SPDR_REG;
    114e:	ef e2       	ldi	r30, 0x2F	; 47
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	80 83       	st	Z, r24
	}

}
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <SPI_VoidSendChar>:
void SPI_VoidSendChar(u8 Copy_u8Data)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
	//while(GET_BIT(SPSR_REG,SPSR_SPIF) == 0);
	SPDR_REG = Copy_u8Data;
    1170:	ef e2       	ldi	r30, 0x2F	; 47
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	80 83       	st	Z, r24
}
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <M_TWI_void_Init>:


/*------------------------------------------------------------------------*/

void M_TWI_void_Init(void)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62

	//TWAR_REG = (SLAVE_ADDRESS << 1) | GENERAL_CALL;

#elif TWI_MODE   ==   TWI_SLAVE_MODE
	/* set SLAVE_ADDRESS and if GENERAL_CALL on  */
	TWAR_REG = (SLAVE_ADDRESS << 1) | GENERAL_CALL;
    1188:	e2 e2       	ldi	r30, 0x22	; 34
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	80 83       	st	Z, r24

	/*EN ACK*/
	//SET_BIT(TWCR_REG,TWCR_TWEA);

	/*EN TWI */
	SET_BIT(TWCR_REG,TWCR_TWEN);
    1190:	a6 e5       	ldi	r26, 0x56	; 86
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e6 e5       	ldi	r30, 0x56	; 86
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	84 60       	ori	r24, 0x04	; 4
    119c:	8c 93       	st	X, r24
}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <M_TWI_u8_StartCondition>:
/*------------------------------------------------------------------------*/



TWI_ERROR_STATUS M_TWI_u8_StartCondition(void)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	0f 92       	push	r0
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	89 83       	std	Y+1, r24	; 0x01


	/* Start Condition */

	SET_BIT(TWCR_REG,TWCR_TWSTA);
    11b2:	a6 e5       	ldi	r26, 0x56	; 86
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e6 e5       	ldi	r30, 0x56	; 86
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	80 62       	ori	r24, 0x20	; 32
    11be:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    11c0:	a6 e5       	ldi	r26, 0x56	; 86
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e6 e5       	ldi	r30, 0x56	; 86
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	80 68       	ori	r24, 0x80	; 128
    11cc:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    11ce:	e6 e5       	ldi	r30, 0x56	; 86
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	88 23       	and	r24, r24
    11d6:	dc f7       	brge	.-10     	; 0x11ce <M_TWI_u8_StartCondition+0x2a>

	if((TWSR_REG & 0xF8) != TWI_START_COND_ACK)
    11d8:	e1 e2       	ldi	r30, 0x21	; 33
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	88 7f       	andi	r24, 0xF8	; 248
    11e4:	90 70       	andi	r25, 0x00	; 0
    11e6:	88 30       	cpi	r24, 0x08	; 8
    11e8:	91 05       	cpc	r25, r1
    11ea:	11 f0       	breq	.+4      	; 0x11f0 <M_TWI_u8_StartCondition+0x4c>
	{
		local_error=START_ERROR;
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	89 83       	std	Y+1, r24	; 0x01
	{

	}


	return  local_error ;
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <M_TWI_void_StopCondition>:

/***************************************************************************/

void M_TWI_void_StopCondition(void)

{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62

	/* Stop Condition */
	SET_BIT(TWCR_REG,TWCR_TWSTO);
    1202:	a6 e5       	ldi	r26, 0x56	; 86
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e6 e5       	ldi	r30, 0x56	; 86
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	80 61       	ori	r24, 0x10	; 16
    120e:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1210:	a6 e5       	ldi	r26, 0x56	; 86
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e6 e5       	ldi	r30, 0x56	; 86
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 68       	ori	r24, 0x80	; 128
    121c:	8c 93       	st	X, r24

}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <M_TWI_u8_RepeatedStart>:

/***************************************************************************/

TWI_ERROR_STATUS M_TWI_u8_RepeatedStart(void)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	0f 92       	push	r0
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	89 83       	std	Y+1, r24	; 0x01


	/* Start Condition */
	SET_BIT(TWCR_REG,TWCR_TWSTA);
    1232:	a6 e5       	ldi	r26, 0x56	; 86
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e6 e5       	ldi	r30, 0x56	; 86
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 62       	ori	r24, 0x20	; 32
    123e:	8c 93       	st	X, r24


	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1240:	a6 e5       	ldi	r26, 0x56	; 86
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e6 e5       	ldi	r30, 0x56	; 86
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 68       	ori	r24, 0x80	; 128
    124c:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    124e:	e6 e5       	ldi	r30, 0x56	; 86
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	88 23       	and	r24, r24
    1256:	dc f7       	brge	.-10     	; 0x124e <M_TWI_u8_RepeatedStart+0x2a>


	if((TWSR_REG & 0xF8) != TWI_REPEATED_START_COND_ACK)
    1258:	e1 e2       	ldi	r30, 0x21	; 33
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 7f       	andi	r24, 0xF8	; 248
    1264:	90 70       	andi	r25, 0x00	; 0
    1266:	80 31       	cpi	r24, 0x10	; 16
    1268:	91 05       	cpc	r25, r1
    126a:	11 f0       	breq	.+4      	; 0x1270 <M_TWI_u8_RepeatedStart+0x4c>
	{
		local_error=REPEATED_STSRT_ERROR;
    126c:	83 e0       	ldi	r24, 0x03	; 3
    126e:	89 83       	std	Y+1, r24	; 0x01
	{

	}


	return  local_error ;
    1270:	89 81       	ldd	r24, Y+1	; 0x01
}
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <M_TWI_u8_SendSlaveAddressWrite>:
/***************************************************************************/



TWI_ERROR_STATUS M_TWI_u8_SendSlaveAddressWrite(u8 Copy_u8Address)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <M_TWI_u8_SendSlaveAddressWrite+0x6>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error = NO_ERROR ;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01


	TWDR_REG = (Copy_u8Address << 1);
    128a:	e3 e2       	ldi	r30, 0x23	; 35
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 0f       	add	r24, r24
    1292:	80 83       	st	Z, r24
	CLR_BIT(TWDR_REG,0);
    1294:	a3 e2       	ldi	r26, 0x23	; 35
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e3 e2       	ldi	r30, 0x23	; 35
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8e 7f       	andi	r24, 0xFE	; 254
    12a0:	8c 93       	st	X, r24



	/* Clear Start condition */
	CLR_BIT(TWCR_REG,TWCR_TWSTA);
    12a2:	a6 e5       	ldi	r26, 0x56	; 86
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e6 e5       	ldi	r30, 0x56	; 86
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    12b0:	a6 e5       	ldi	r26, 0x56	; 86
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e6 e5       	ldi	r30, 0x56	; 86
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 68       	ori	r24, 0x80	; 128
    12bc:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    12be:	e6 e5       	ldi	r30, 0x56	; 86
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	88 23       	and	r24, r24
    12c6:	dc f7       	brge	.-10     	; 0x12be <M_TWI_u8_SendSlaveAddressWrite+0x44>


	if((TWSR_REG & 0xF8) != TWI_SEND_SLAVE_ADD_WRITE_ACK)
    12c8:	e1 e2       	ldi	r30, 0x21	; 33
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	88 7f       	andi	r24, 0xF8	; 248
    12d4:	90 70       	andi	r25, 0x00	; 0
    12d6:	88 31       	cpi	r24, 0x18	; 24
    12d8:	91 05       	cpc	r25, r1
    12da:	11 f0       	breq	.+4      	; 0x12e0 <M_TWI_u8_SendSlaveAddressWrite+0x66>
	{
		local_error=SLAVE_ADDRESS_WRITE_ERROR;
    12dc:	84 e0       	ldi	r24, 0x04	; 4
    12de:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <M_TWI_u8_SendSlaveAddressRead>:

/***************************************************************************/

TWI_ERROR_STATUS M_TWI_u8_SendSlaveAddressRead(u8 Copy_u8Address)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <M_TWI_u8_SendSlaveAddressRead+0x6>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error =NO_ERROR ;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01


	TWDR_REG = ( (Copy_u8Address << 1) | 1);
    12fc:	e3 e2       	ldi	r30, 0x23	; 35
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	81 60       	ori	r24, 0x01	; 1
    130c:	80 83       	st	Z, r24

	/* Clear Start condition */
	CLR_BIT(TWCR_REG,TWCR_TWSTA);
    130e:	a6 e5       	ldi	r26, 0x56	; 86
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e6 e5       	ldi	r30, 0x56	; 86
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8f 7d       	andi	r24, 0xDF	; 223
    131a:	8c 93       	st	X, r24


	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    131c:	a6 e5       	ldi	r26, 0x56	; 86
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e6 e5       	ldi	r30, 0x56	; 86
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	80 68       	ori	r24, 0x80	; 128
    1328:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    132a:	e6 e5       	ldi	r30, 0x56	; 86
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	88 23       	and	r24, r24
    1332:	dc f7       	brge	.-10     	; 0x132a <M_TWI_u8_SendSlaveAddressRead+0x3e>

	if((TWSR_REG & 0xF8) != TWI_SEND_SLAVE_ADD_READ_ACK)
    1334:	e1 e2       	ldi	r30, 0x21	; 33
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	88 7f       	andi	r24, 0xF8	; 248
    1340:	90 70       	andi	r25, 0x00	; 0
    1342:	80 34       	cpi	r24, 0x40	; 64
    1344:	91 05       	cpc	r25, r1
    1346:	11 f0       	breq	.+4      	; 0x134c <M_TWI_u8_SendSlaveAddressRead+0x60>
	{
		local_error=SLAVE_ADDRESS_READ_ERROR;
    1348:	85 e0       	ldi	r24, 0x05	; 5
    134a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    134c:	89 81       	ldd	r24, Y+1	; 0x01

}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <M_TWI_u8_SendByte>:



/***************************************************************************/
TWI_ERROR_STATUS M_TWI_u8_SendByte(u8 Copy_u8Data)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <M_TWI_u8_SendByte+0x6>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01

	TWDR_REG = Copy_u8Data;
    1368:	e3 e2       	ldi	r30, 0x23	; 35
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	80 83       	st	Z, r24
	/* Clear Start condition */
	//CLR_BIT(TWCR_REG,TWCR_TWSTA);


	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    1370:	a6 e5       	ldi	r26, 0x56	; 86
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e6 e5       	ldi	r30, 0x56	; 86
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	80 68       	ori	r24, 0x80	; 128
    137c:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    137e:	e6 e5       	ldi	r30, 0x56	; 86
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	88 23       	and	r24, r24
    1386:	dc f7       	brge	.-10     	; 0x137e <M_TWI_u8_SendByte+0x26>

	if((TWSR_REG & 0xF8) != TWI_SEND_BYTE_ACK)
    1388:	e1 e2       	ldi	r30, 0x21	; 33
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	88 7f       	andi	r24, 0xF8	; 248
    1394:	90 70       	andi	r25, 0x00	; 0
    1396:	88 32       	cpi	r24, 0x28	; 40
    1398:	91 05       	cpc	r25, r1
    139a:	11 f0       	breq	.+4      	; 0x13a0 <M_TWI_u8_SendByte+0x48>
	{
		local_error=SEND_BYTE_ERROR;
    139c:	86 e0       	ldi	r24, 0x06	; 6
    139e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01

}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <M_TWI_u8_ReadByte>:

/***************************************************************************/

TWI_ERROR_STATUS  M_TWI_u8_ReadByte(u8 *TWI_DATA)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <M_TWI_u8_ReadByte+0x6>
    13b2:	0f 92       	push	r0
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9b 83       	std	Y+3, r25	; 0x03
    13ba:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error =NO_ERROR ;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	89 83       	std	Y+1, r24	; 0x01


	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    13c0:	a6 e5       	ldi	r26, 0x56	; 86
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e6 e5       	ldi	r30, 0x56	; 86
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 68       	ori	r24, 0x80	; 128
    13cc:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    13ce:	e6 e5       	ldi	r30, 0x56	; 86
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	88 23       	and	r24, r24
    13d6:	dc f7       	brge	.-10     	; 0x13ce <M_TWI_u8_ReadByte+0x22>
	{
		*TWI_DATA = TWDR_REG;
	}
*/

	*TWI_DATA = TWDR_REG;
    13d8:	e3 e2       	ldi	r30, 0x23	; 35
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	ea 81       	ldd	r30, Y+2	; 0x02
    13e0:	fb 81       	ldd	r31, Y+3	; 0x03
    13e2:	80 83       	st	Z, r24

	return  local_error ;
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <GIE_Enable>:
#include "GIE_Interface.h"
#include "GIE_private.h"


void GIE_Enable(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(GIE_SREG,I_bit);
    13fa:	af e5       	ldi	r26, 0x5F	; 95
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ef e5       	ldi	r30, 0x5F	; 95
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24

}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <GIE_Disable>:

void GIE_Disable(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
 CLR_BIT(GIE_SREG,I_bit);
    1416:	af e5       	ldi	r26, 0x5F	; 95
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ef e5       	ldi	r30, 0x5F	; 95
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 77       	andi	r24, 0x7F	; 127
    1422:	8c 93       	st	X, r24

}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <EXTINT_voidInit>:



#ifdef EXT_Init_NORMAL
void EXTINT_voidInit(u8 copy_u8ExtNum,u8 copy_u8ControlSens)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <EXTINT_voidInit+0x6>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <EXTINT_voidInit+0x8>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8ExtNum)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	09 f4       	brne	.+2      	; 0x1450 <EXTINT_voidInit+0x26>
    144e:	40 c0       	rjmp	.+128    	; 0x14d0 <EXTINT_voidInit+0xa6>
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <EXTINT_voidInit+0x32>
    145a:	6f c0       	rjmp	.+222    	; 0x153a <EXTINT_voidInit+0x110>
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	09 f0       	breq	.+2      	; 0x1466 <EXTINT_voidInit+0x3c>
    1464:	90 c0       	rjmp	.+288    	; 0x1586 <EXTINT_voidInit+0x15c>
	{
	case EXT0_ID :


		DIO_voidSetPinDirection(PORTD_ID,PIN2,PIN_INPUT);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PORTD_ID,PIN2,PIN_HIGH);
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	62 e0       	ldi	r22, 0x02	; 2
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
		if(copy_u8ControlSens==FALLING_EDGE)
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	88 23       	and	r24, r24
    147e:	79 f4       	brne	.+30     	; 0x149e <EXTINT_voidInit+0x74>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    1480:	a5 e5       	ldi	r26, 0x55	; 85
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e5 e5       	ldi	r30, 0x55	; 85
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8e 7f       	andi	r24, 0xFE	; 254
    148c:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    148e:	a5 e5       	ldi	r26, 0x55	; 85
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e5       	ldi	r30, 0x55	; 85
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	82 60       	ori	r24, 0x02	; 2
    149a:	8c 93       	st	X, r24
    149c:	11 c0       	rjmp	.+34     	; 0x14c0 <EXTINT_voidInit+0x96>

		}


		else if(copy_u8ControlSens==RISING_EDGE)
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	71 f4       	brne	.+28     	; 0x14c0 <EXTINT_voidInit+0x96>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    14a4:	a5 e5       	ldi	r26, 0x55	; 85
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e5 e5       	ldi	r30, 0x55	; 85
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	81 60       	ori	r24, 0x01	; 1
    14b0:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    14b2:	a5 e5       	ldi	r26, 0x55	; 85
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e5 e5       	ldi	r30, 0x55	; 85
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	82 60       	ori	r24, 0x02	; 2
    14be:	8c 93       	st	X, r24
		}

		SET_BIT(GICR_REG,GICR_INT0);
    14c0:	ab e5       	ldi	r26, 0x5B	; 91
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	eb e5       	ldi	r30, 0x5B	; 91
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	80 64       	ori	r24, 0x40	; 64
    14cc:	8c 93       	st	X, r24
    14ce:	5b c0       	rjmp	.+182    	; 0x1586 <EXTINT_voidInit+0x15c>
		break ;


	case EXT1_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN3,PIN_INPUT);
    14d0:	83 e0       	ldi	r24, 0x03	; 3
    14d2:	63 e0       	ldi	r22, 0x03	; 3
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PORTD_ID,PIN3,PIN_HIGH);
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	63 e0       	ldi	r22, 0x03	; 3
    14de:	41 e0       	ldi	r20, 0x01	; 1
    14e0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
		if(copy_u8ControlSens==FALLING_EDGE)
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	88 23       	and	r24, r24
    14e8:	79 f4       	brne	.+30     	; 0x1508 <EXTINT_voidInit+0xde>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    14ea:	a5 e5       	ldi	r26, 0x55	; 85
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e5       	ldi	r30, 0x55	; 85
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8b 7f       	andi	r24, 0xFB	; 251
    14f6:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    14f8:	a5 e5       	ldi	r26, 0x55	; 85
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e5 e5       	ldi	r30, 0x55	; 85
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	88 60       	ori	r24, 0x08	; 8
    1504:	8c 93       	st	X, r24
    1506:	11 c0       	rjmp	.+34     	; 0x152a <EXTINT_voidInit+0x100>

		}

		else if(copy_u8ControlSens==RISING_EDGE)
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	71 f4       	brne	.+28     	; 0x152a <EXTINT_voidInit+0x100>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC10);
    150e:	a5 e5       	ldi	r26, 0x55	; 85
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e5       	ldi	r30, 0x55	; 85
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	84 60       	ori	r24, 0x04	; 4
    151a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    151c:	a5 e5       	ldi	r26, 0x55	; 85
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e5 e5       	ldi	r30, 0x55	; 85
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	88 60       	ori	r24, 0x08	; 8
    1528:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT1);
    152a:	ab e5       	ldi	r26, 0x5B	; 91
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	eb e5       	ldi	r30, 0x5B	; 91
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	80 68       	ori	r24, 0x80	; 128
    1536:	8c 93       	st	X, r24
    1538:	26 c0       	rjmp	.+76     	; 0x1586 <EXTINT_voidInit+0x15c>

		break ;

	case EXT2_ID :

		DIO_voidSetPinDirection(PORTB_ID,PIN2,PIN_INPUT);
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	62 e0       	ldi	r22, 0x02	; 2
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PORTB_ID,PIN2,PIN_HIGH);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
		if(copy_u8ControlSens==FALLING_EDGE)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	88 23       	and	r24, r24
    1552:	41 f4       	brne	.+16     	; 0x1564 <EXTINT_voidInit+0x13a>
		{
			CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    1554:	a4 e5       	ldi	r26, 0x54	; 84
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e4 e5       	ldi	r30, 0x54	; 84
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7b       	andi	r24, 0xBF	; 191
    1560:	8c 93       	st	X, r24
    1562:	0a c0       	rjmp	.+20     	; 0x1578 <EXTINT_voidInit+0x14e>
		}

		else if(copy_u8ControlSens==RISING_EDGE)
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	39 f4       	brne	.+14     	; 0x1578 <EXTINT_voidInit+0x14e>
		{
			SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    156a:	a4 e5       	ldi	r26, 0x54	; 84
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e4 e5       	ldi	r30, 0x54	; 84
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 64       	ori	r24, 0x40	; 64
    1576:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT2);
    1578:	ab e5       	ldi	r26, 0x5B	; 91
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	eb e5       	ldi	r30, 0x5B	; 91
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 62       	ori	r24, 0x20	; 32
    1584:	8c 93       	st	X, r24

		break ;

	}
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <EXTINT_voidSetCallBack>:




void EXTINT_voidSetCallBack (  void (*ptr_ext)(void) ,u8 copy_u8ExtNum )
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <EXTINT_voidSetCallBack+0x6>
    159a:	00 d0       	rcall	.+0      	; 0x159c <EXTINT_voidSetCallBack+0x8>
    159c:	0f 92       	push	r0
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	6b 83       	std	Y+3, r22	; 0x03

	if(ptr_ext!=NULL)
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	39 f1       	breq	.+78     	; 0x15fe <EXTINT_voidSetCallBack+0x6a>
	{
		switch(copy_u8ExtNum)
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3d 83       	std	Y+5, r19	; 0x05
    15b8:	2c 83       	std	Y+4, r18	; 0x04
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	91 05       	cpc	r25, r1
    15c2:	81 f0       	breq	.+32     	; 0x15e4 <EXTINT_voidSetCallBack+0x50>
    15c4:	2c 81       	ldd	r18, Y+4	; 0x04
    15c6:	3d 81       	ldd	r19, Y+5	; 0x05
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	91 f0       	breq	.+36     	; 0x15f2 <EXTINT_voidSetCallBack+0x5e>
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	a1 f4       	brne	.+40     	; 0x15fe <EXTINT_voidSetCallBack+0x6a>
		{
		case EXT0_ID:
			ptr_ArrCallBack[ 0 ]= ptr_ext;
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	90 93 95 00 	sts	0x0095, r25
    15de:	80 93 94 00 	sts	0x0094, r24
    15e2:	0d c0       	rjmp	.+26     	; 0x15fe <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT1_ID:
			ptr_ArrCallBack[ 1 ]= ptr_ext;
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	90 93 97 00 	sts	0x0097, r25
    15ec:	80 93 96 00 	sts	0x0096, r24
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT2_ID:
			ptr_ArrCallBack[ 2 ]= ptr_ext;
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	9a 81       	ldd	r25, Y+2	; 0x02
    15f6:	90 93 99 00 	sts	0x0099, r25
    15fa:	80 93 98 00 	sts	0x0098, r24
		}



	}
}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <__vector_1>:



void __vector_1 () __attribute__ ((signal));
void __vector_1 ()
{
    160e:	1f 92       	push	r1
    1610:	0f 92       	push	r0
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	0f 92       	push	r0
    1616:	11 24       	eor	r1, r1
    1618:	2f 93       	push	r18
    161a:	3f 93       	push	r19
    161c:	4f 93       	push	r20
    161e:	5f 93       	push	r21
    1620:	6f 93       	push	r22
    1622:	7f 93       	push	r23
    1624:	8f 93       	push	r24
    1626:	9f 93       	push	r25
    1628:	af 93       	push	r26
    162a:	bf 93       	push	r27
    162c:	ef 93       	push	r30
    162e:	ff 93       	push	r31
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62

	if(ptr_ArrCallBack[0] !=NULL)
    1638:	80 91 94 00 	lds	r24, 0x0094
    163c:	90 91 95 00 	lds	r25, 0x0095
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	29 f0       	breq	.+10     	; 0x164e <__vector_1+0x40>
	{
		ptr_ArrCallBack[0]();
    1644:	e0 91 94 00 	lds	r30, 0x0094
    1648:	f0 91 95 00 	lds	r31, 0x0095
    164c:	09 95       	icall
	}



}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	ff 91       	pop	r31
    1654:	ef 91       	pop	r30
    1656:	bf 91       	pop	r27
    1658:	af 91       	pop	r26
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	7f 91       	pop	r23
    1660:	6f 91       	pop	r22
    1662:	5f 91       	pop	r21
    1664:	4f 91       	pop	r20
    1666:	3f 91       	pop	r19
    1668:	2f 91       	pop	r18
    166a:	0f 90       	pop	r0
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	0f 90       	pop	r0
    1670:	1f 90       	pop	r1
    1672:	18 95       	reti

00001674 <__vector_2>:

void __vector_2 () __attribute__ ((signal));
void __vector_2 ()
{
    1674:	1f 92       	push	r1
    1676:	0f 92       	push	r0
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	0f 92       	push	r0
    167c:	11 24       	eor	r1, r1
    167e:	2f 93       	push	r18
    1680:	3f 93       	push	r19
    1682:	4f 93       	push	r20
    1684:	5f 93       	push	r21
    1686:	6f 93       	push	r22
    1688:	7f 93       	push	r23
    168a:	8f 93       	push	r24
    168c:	9f 93       	push	r25
    168e:	af 93       	push	r26
    1690:	bf 93       	push	r27
    1692:	ef 93       	push	r30
    1694:	ff 93       	push	r31
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[1] !=NULL)
    169e:	80 91 96 00 	lds	r24, 0x0096
    16a2:	90 91 97 00 	lds	r25, 0x0097
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	29 f0       	breq	.+10     	; 0x16b4 <__vector_2+0x40>
		{
		ptr_ArrCallBack[1]();
    16aa:	e0 91 96 00 	lds	r30, 0x0096
    16ae:	f0 91 97 00 	lds	r31, 0x0097
    16b2:	09 95       	icall
		}


}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	ff 91       	pop	r31
    16ba:	ef 91       	pop	r30
    16bc:	bf 91       	pop	r27
    16be:	af 91       	pop	r26
    16c0:	9f 91       	pop	r25
    16c2:	8f 91       	pop	r24
    16c4:	7f 91       	pop	r23
    16c6:	6f 91       	pop	r22
    16c8:	5f 91       	pop	r21
    16ca:	4f 91       	pop	r20
    16cc:	3f 91       	pop	r19
    16ce:	2f 91       	pop	r18
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	0f 90       	pop	r0
    16d6:	1f 90       	pop	r1
    16d8:	18 95       	reti

000016da <__vector_3>:

void __vector_3 () __attribute__ ((signal));
void __vector_3 ()
{
    16da:	1f 92       	push	r1
    16dc:	0f 92       	push	r0
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	0f 92       	push	r0
    16e2:	11 24       	eor	r1, r1
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[2] !=NULL)
    1704:	80 91 98 00 	lds	r24, 0x0098
    1708:	90 91 99 00 	lds	r25, 0x0099
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	29 f0       	breq	.+10     	; 0x171a <__vector_3+0x40>
		{
		ptr_ArrCallBack[2]();
    1710:	e0 91 98 00 	lds	r30, 0x0098
    1714:	f0 91 99 00 	lds	r31, 0x0099
    1718:	09 95       	icall
		}


}
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	ff 91       	pop	r31
    1720:	ef 91       	pop	r30
    1722:	bf 91       	pop	r27
    1724:	af 91       	pop	r26
    1726:	9f 91       	pop	r25
    1728:	8f 91       	pop	r24
    172a:	7f 91       	pop	r23
    172c:	6f 91       	pop	r22
    172e:	5f 91       	pop	r21
    1730:	4f 91       	pop	r20
    1732:	3f 91       	pop	r19
    1734:	2f 91       	pop	r18
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	1f 90       	pop	r1
    173e:	18 95       	reti

00001740 <DIO_voidSetPortDirection>:
#include"DIO_Private.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	00 d0       	rcall	.+0      	; 0x1746 <DIO_voidSetPortDirection+0x6>
    1746:	00 d0       	rcall	.+0      	; 0x1748 <DIO_voidSetPortDirection+0x8>
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8portID)
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	3c 83       	std	Y+4, r19	; 0x04
    1758:	2b 83       	std	Y+3, r18	; 0x03
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	91 05       	cpc	r25, r1
    1762:	d1 f0       	breq	.+52     	; 0x1798 <DIO_voidSetPortDirection+0x58>
    1764:	2b 81       	ldd	r18, Y+3	; 0x03
    1766:	3c 81       	ldd	r19, Y+4	; 0x04
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	2c f4       	brge	.+10     	; 0x1778 <DIO_voidSetPortDirection+0x38>
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	61 f0       	breq	.+24     	; 0x178e <DIO_voidSetPortDirection+0x4e>
    1776:	1e c0       	rjmp	.+60     	; 0x17b4 <DIO_voidSetPortDirection+0x74>
    1778:	2b 81       	ldd	r18, Y+3	; 0x03
    177a:	3c 81       	ldd	r19, Y+4	; 0x04
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	81 f0       	breq	.+32     	; 0x17a2 <DIO_voidSetPortDirection+0x62>
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	91 05       	cpc	r25, r1
    178a:	81 f0       	breq	.+32     	; 0x17ac <DIO_voidSetPortDirection+0x6c>
    178c:	13 c0       	rjmp	.+38     	; 0x17b4 <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
    178e:	ea e3       	ldi	r30, 0x3A	; 58
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	80 83       	st	Z, r24
    1796:	0e c0       	rjmp	.+28     	; 0x17b4 <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
    1798:	e7 e3       	ldi	r30, 0x37	; 55
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	80 83       	st	Z, r24
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
    17a2:	e4 e3       	ldi	r30, 0x34	; 52
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	80 83       	st	Z, r24
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
    17ac:	e1 e3       	ldi	r30, 0x31	; 49
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	80 83       	st	Z, r24

	}
}
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <DIO_voidSetPortValue+0x6>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <DIO_voidSetPortValue+0x8>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortID)
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	3c 83       	std	Y+4, r19	; 0x04
    17da:	2b 83       	std	Y+3, r18	; 0x03
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	91 05       	cpc	r25, r1
    17e4:	d1 f0       	breq	.+52     	; 0x181a <DIO_voidSetPortValue+0x58>
    17e6:	2b 81       	ldd	r18, Y+3	; 0x03
    17e8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	2c f4       	brge	.+10     	; 0x17fa <DIO_voidSetPortValue+0x38>
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	61 f0       	breq	.+24     	; 0x1810 <DIO_voidSetPortValue+0x4e>
    17f8:	1e c0       	rjmp	.+60     	; 0x1836 <DIO_voidSetPortValue+0x74>
    17fa:	2b 81       	ldd	r18, Y+3	; 0x03
    17fc:	3c 81       	ldd	r19, Y+4	; 0x04
    17fe:	22 30       	cpi	r18, 0x02	; 2
    1800:	31 05       	cpc	r19, r1
    1802:	81 f0       	breq	.+32     	; 0x1824 <DIO_voidSetPortValue+0x62>
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	91 05       	cpc	r25, r1
    180c:	81 f0       	breq	.+32     	; 0x182e <DIO_voidSetPortValue+0x6c>
    180e:	13 c0       	rjmp	.+38     	; 0x1836 <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
    1810:	eb e3       	ldi	r30, 0x3B	; 59
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	80 83       	st	Z, r24
    1818:	0e c0       	rjmp	.+28     	; 0x1836 <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
    181a:	e8 e3       	ldi	r30, 0x38	; 56
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	80 83       	st	Z, r24
    1822:	09 c0       	rjmp	.+18     	; 0x1836 <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
    1824:	e5 e3       	ldi	r30, 0x35	; 53
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	80 83       	st	Z, r24
    182c:	04 c0       	rjmp	.+8      	; 0x1836 <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
    182e:	e2 e3       	ldi	r30, 0x32	; 50
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	80 83       	st	Z, r24

	}
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	27 97       	sbiw	r28, 0x07	; 7
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	6a 83       	std	Y+2, r22	; 0x02
    185c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0 &&Copy_u8PinID<=PIN7)
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	88 30       	cpi	r24, 0x08	; 8
    1862:	08 f0       	brcs	.+2      	; 0x1866 <DIO_voidSetPinDirection+0x22>
    1864:	ea c0       	rjmp	.+468    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	09 f0       	breq	.+2      	; 0x186e <DIO_voidSetPinDirection+0x2a>
    186c:	6f c0       	rjmp	.+222    	; 0x194c <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	3f 83       	std	Y+7, r19	; 0x07
    1876:	2e 83       	std	Y+6, r18	; 0x06
    1878:	8e 81       	ldd	r24, Y+6	; 0x06
    187a:	9f 81       	ldd	r25, Y+7	; 0x07
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	91 05       	cpc	r25, r1
    1880:	49 f1       	breq	.+82     	; 0x18d4 <DIO_voidSetPinDirection+0x90>
    1882:	2e 81       	ldd	r18, Y+6	; 0x06
    1884:	3f 81       	ldd	r19, Y+7	; 0x07
    1886:	22 30       	cpi	r18, 0x02	; 2
    1888:	31 05       	cpc	r19, r1
    188a:	2c f4       	brge	.+10     	; 0x1896 <DIO_voidSetPinDirection+0x52>
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	9f 81       	ldd	r25, Y+7	; 0x07
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	61 f0       	breq	.+24     	; 0x18ac <DIO_voidSetPinDirection+0x68>
    1894:	d2 c0       	rjmp	.+420    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
    1896:	2e 81       	ldd	r18, Y+6	; 0x06
    1898:	3f 81       	ldd	r19, Y+7	; 0x07
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	71 f1       	breq	.+92     	; 0x18fc <DIO_voidSetPinDirection+0xb8>
    18a0:	8e 81       	ldd	r24, Y+6	; 0x06
    18a2:	9f 81       	ldd	r25, Y+7	; 0x07
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	91 05       	cpc	r25, r1
    18a8:	e9 f1       	breq	.+122    	; 0x1924 <DIO_voidSetPinDirection+0xe0>
    18aa:	c7 c0       	rjmp	.+398    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
    18ac:	aa e3       	ldi	r26, 0x3A	; 58
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ea e3       	ldi	r30, 0x3A	; 58
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_voidSetPinDirection+0x86>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_voidSetPinDirection+0x82>
    18ce:	84 2b       	or	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	b3 c0       	rjmp	.+358    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
    18d4:	a7 e3       	ldi	r26, 0x37	; 55
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e7 e3       	ldi	r30, 0x37	; 55
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	48 2f       	mov	r20, r24
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <DIO_voidSetPinDirection+0xae>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <DIO_voidSetPinDirection+0xaa>
    18f6:	84 2b       	or	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	9f c0       	rjmp	.+318    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
    18fc:	a4 e3       	ldi	r26, 0x34	; 52
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e4 e3       	ldi	r30, 0x34	; 52
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <DIO_voidSetPinDirection+0xd6>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <DIO_voidSetPinDirection+0xd2>
    191e:	84 2b       	or	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	8b c0       	rjmp	.+278    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
    1924:	a1 e3       	ldi	r26, 0x31	; 49
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e1 e3       	ldi	r30, 0x31	; 49
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 2e       	mov	r0, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_voidSetPinDirection+0xfe>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	0a 94       	dec	r0
    1944:	e2 f7       	brpl	.-8      	; 0x193e <DIO_voidSetPinDirection+0xfa>
    1946:	84 2b       	or	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	77 c0       	rjmp	.+238    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	88 23       	and	r24, r24
    1950:	09 f0       	breq	.+2      	; 0x1954 <DIO_voidSetPinDirection+0x110>
    1952:	73 c0       	rjmp	.+230    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	3d 83       	std	Y+5, r19	; 0x05
    195c:	2c 83       	std	Y+4, r18	; 0x04
    195e:	8c 81       	ldd	r24, Y+4	; 0x04
    1960:	9d 81       	ldd	r25, Y+5	; 0x05
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	91 05       	cpc	r25, r1
    1966:	59 f1       	breq	.+86     	; 0x19be <DIO_voidSetPinDirection+0x17a>
    1968:	2c 81       	ldd	r18, Y+4	; 0x04
    196a:	3d 81       	ldd	r19, Y+5	; 0x05
    196c:	22 30       	cpi	r18, 0x02	; 2
    196e:	31 05       	cpc	r19, r1
    1970:	2c f4       	brge	.+10     	; 0x197c <DIO_voidSetPinDirection+0x138>
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	9d 81       	ldd	r25, Y+5	; 0x05
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	69 f0       	breq	.+26     	; 0x1994 <DIO_voidSetPinDirection+0x150>
    197a:	5f c0       	rjmp	.+190    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
    197c:	2c 81       	ldd	r18, Y+4	; 0x04
    197e:	3d 81       	ldd	r19, Y+5	; 0x05
    1980:	22 30       	cpi	r18, 0x02	; 2
    1982:	31 05       	cpc	r19, r1
    1984:	89 f1       	breq	.+98     	; 0x19e8 <DIO_voidSetPinDirection+0x1a4>
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	91 05       	cpc	r25, r1
    198e:	09 f4       	brne	.+2      	; 0x1992 <DIO_voidSetPinDirection+0x14e>
    1990:	40 c0       	rjmp	.+128    	; 0x1a12 <DIO_voidSetPinDirection+0x1ce>
    1992:	53 c0       	rjmp	.+166    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
    1994:	aa e3       	ldi	r26, 0x3A	; 58
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ea e3       	ldi	r30, 0x3A	; 58
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <DIO_voidSetPinDirection+0x16e>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <DIO_voidSetPinDirection+0x16a>
    19b6:	80 95       	com	r24
    19b8:	84 23       	and	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	3e c0       	rjmp	.+124    	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
    19be:	a7 e3       	ldi	r26, 0x37	; 55
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e7 e3       	ldi	r30, 0x37	; 55
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_voidSetPinDirection+0x198>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_voidSetPinDirection+0x194>
    19e0:	80 95       	com	r24
    19e2:	84 23       	and	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	29 c0       	rjmp	.+82     	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
    19e8:	a4 e3       	ldi	r26, 0x34	; 52
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e4 e3       	ldi	r30, 0x34	; 52
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <DIO_voidSetPinDirection+0x1c2>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <DIO_voidSetPinDirection+0x1be>
    1a0a:	80 95       	com	r24
    1a0c:	84 23       	and	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	14 c0       	rjmp	.+40     	; 0x1a3a <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
    1a12:	a1 e3       	ldi	r26, 0x31	; 49
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e1 e3       	ldi	r30, 0x31	; 49
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_voidSetPinDirection+0x1ec>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_voidSetPinDirection+0x1e8>
    1a34:	80 95       	com	r24
    1a36:	84 23       	and	r24, r20
    1a38:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
    1a3a:	27 96       	adiw	r28, 0x07	; 7
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	27 97       	sbiw	r28, 0x07	; 7
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	6a 83       	std	Y+2, r22	; 0x02
    1a64:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	88 30       	cpi	r24, 0x08	; 8
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <DIO_voidSetPinValue+0x22>
    1a6c:	ea c0       	rjmp	.+468    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <DIO_voidSetPinValue+0x2a>
    1a74:	6f c0       	rjmp	.+222    	; 0x1b54 <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	3f 83       	std	Y+7, r19	; 0x07
    1a7e:	2e 83       	std	Y+6, r18	; 0x06
    1a80:	8e 81       	ldd	r24, Y+6	; 0x06
    1a82:	9f 81       	ldd	r25, Y+7	; 0x07
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	91 05       	cpc	r25, r1
    1a88:	49 f1       	breq	.+82     	; 0x1adc <DIO_voidSetPinValue+0x90>
    1a8a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a8c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <DIO_voidSetPinValue+0x52>
    1a94:	8e 81       	ldd	r24, Y+6	; 0x06
    1a96:	9f 81       	ldd	r25, Y+7	; 0x07
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	61 f0       	breq	.+24     	; 0x1ab4 <DIO_voidSetPinValue+0x68>
    1a9c:	d2 c0       	rjmp	.+420    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
    1a9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa0:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa2:	22 30       	cpi	r18, 0x02	; 2
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	71 f1       	breq	.+92     	; 0x1b04 <DIO_voidSetPinValue+0xb8>
    1aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1aac:	83 30       	cpi	r24, 0x03	; 3
    1aae:	91 05       	cpc	r25, r1
    1ab0:	e9 f1       	breq	.+122    	; 0x1b2c <DIO_voidSetPinValue+0xe0>
    1ab2:	c7 c0       	rjmp	.+398    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
    1ab4:	ab e3       	ldi	r26, 0x3B	; 59
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	eb e3       	ldi	r30, 0x3B	; 59
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_voidSetPinValue+0x86>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_voidSetPinValue+0x82>
    1ad6:	84 2b       	or	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	b3 c0       	rjmp	.+358    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
    1adc:	a8 e3       	ldi	r26, 0x38	; 56
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e8 e3       	ldi	r30, 0x38	; 56
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <DIO_voidSetPinValue+0xae>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <DIO_voidSetPinValue+0xaa>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	9f c0       	rjmp	.+318    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
    1b04:	a5 e3       	ldi	r26, 0x35	; 53
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e3       	ldi	r30, 0x35	; 53
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <DIO_voidSetPinValue+0xd6>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <DIO_voidSetPinValue+0xd2>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	8b c0       	rjmp	.+278    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
    1b2c:	a2 e3       	ldi	r26, 0x32	; 50
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e2 e3       	ldi	r30, 0x32	; 50
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <DIO_voidSetPinValue+0xfe>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <DIO_voidSetPinValue+0xfa>
    1b4e:	84 2b       	or	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	77 c0       	rjmp	.+238    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 23       	and	r24, r24
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <DIO_voidSetPinValue+0x110>
    1b5a:	73 c0       	rjmp	.+230    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3d 83       	std	Y+5, r19	; 0x05
    1b64:	2c 83       	std	Y+4, r18	; 0x04
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	59 f1       	breq	.+86     	; 0x1bc6 <DIO_voidSetPinValue+0x17a>
    1b70:	2c 81       	ldd	r18, Y+4	; 0x04
    1b72:	3d 81       	ldd	r19, Y+5	; 0x05
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <DIO_voidSetPinValue+0x138>
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	69 f0       	breq	.+26     	; 0x1b9c <DIO_voidSetPinValue+0x150>
    1b82:	5f c0       	rjmp	.+190    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
    1b84:	2c 81       	ldd	r18, Y+4	; 0x04
    1b86:	3d 81       	ldd	r19, Y+5	; 0x05
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	89 f1       	breq	.+98     	; 0x1bf0 <DIO_voidSetPinValue+0x1a4>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <DIO_voidSetPinValue+0x14e>
    1b98:	40 c0       	rjmp	.+128    	; 0x1c1a <DIO_voidSetPinValue+0x1ce>
    1b9a:	53 c0       	rjmp	.+166    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
    1b9c:	ab e3       	ldi	r26, 0x3B	; 59
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	eb e3       	ldi	r30, 0x3B	; 59
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <DIO_voidSetPinValue+0x16e>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <DIO_voidSetPinValue+0x16a>
    1bbe:	80 95       	com	r24
    1bc0:	84 23       	and	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	3e c0       	rjmp	.+124    	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
    1bc6:	a8 e3       	ldi	r26, 0x38	; 56
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e8 e3       	ldi	r30, 0x38	; 56
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_voidSetPinValue+0x198>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_voidSetPinValue+0x194>
    1be8:	80 95       	com	r24
    1bea:	84 23       	and	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	29 c0       	rjmp	.+82     	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
    1bf0:	a5 e3       	ldi	r26, 0x35	; 53
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e5 e3       	ldi	r30, 0x35	; 53
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_voidSetPinValue+0x1c2>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_voidSetPinValue+0x1be>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	14 c0       	rjmp	.+40     	; 0x1c42 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    1c1a:	a2 e3       	ldi	r26, 0x32	; 50
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e2 e3       	ldi	r30, 0x32	; 50
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_voidSetPinValue+0x1ec>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <DIO_voidSetPinValue+0x1e8>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24

			}
		}
	}
}
    1c42:	27 96       	adiw	r28, 0x07	; 7
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <DIO_u8GetBitValue+0x6>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <DIO_u8GetBitValue+0x8>
    1c5c:	0f 92       	push	r0
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    1c64:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7 )
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	88 30       	cpi	r24, 0x08	; 8
    1c6a:	08 f0       	brcs	.+2      	; 0x1c6e <DIO_u8GetBitValue+0x1a>
    1c6c:	67 c0       	rjmp	.+206    	; 0x1d3c <DIO_u8GetBitValue+0xe8>
	{
		switch(copy_u8PortID)
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3d 83       	std	Y+5, r19	; 0x05
    1c76:	2c 83       	std	Y+4, r18	; 0x04
    1c78:	4c 81       	ldd	r20, Y+4	; 0x04
    1c7a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c7c:	41 30       	cpi	r20, 0x01	; 1
    1c7e:	51 05       	cpc	r21, r1
    1c80:	41 f1       	breq	.+80     	; 0x1cd2 <DIO_u8GetBitValue+0x7e>
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	9d 81       	ldd	r25, Y+5	; 0x05
    1c86:	82 30       	cpi	r24, 0x02	; 2
    1c88:	91 05       	cpc	r25, r1
    1c8a:	34 f4       	brge	.+12     	; 0x1c98 <DIO_u8GetBitValue+0x44>
    1c8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c90:	21 15       	cp	r18, r1
    1c92:	31 05       	cpc	r19, r1
    1c94:	61 f0       	breq	.+24     	; 0x1cae <DIO_u8GetBitValue+0x5a>
    1c96:	52 c0       	rjmp	.+164    	; 0x1d3c <DIO_u8GetBitValue+0xe8>
    1c98:	4c 81       	ldd	r20, Y+4	; 0x04
    1c9a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c9c:	42 30       	cpi	r20, 0x02	; 2
    1c9e:	51 05       	cpc	r21, r1
    1ca0:	51 f1       	breq	.+84     	; 0x1cf6 <DIO_u8GetBitValue+0xa2>
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	b9 f1       	breq	.+110    	; 0x1d1a <DIO_u8GetBitValue+0xc6>
    1cac:	47 c0       	rjmp	.+142    	; 0x1d3c <DIO_u8GetBitValue+0xe8>
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    1cae:	e9 e3       	ldi	r30, 0x39	; 57
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a9 01       	movw	r20, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_u8GetBitValue+0x72>
    1cc2:	55 95       	asr	r21
    1cc4:	47 95       	ror	r20
    1cc6:	8a 95       	dec	r24
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_u8GetBitValue+0x6e>
    1cca:	ca 01       	movw	r24, r20
    1ccc:	81 70       	andi	r24, 0x01	; 1
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	35 c0       	rjmp	.+106    	; 0x1d3c <DIO_u8GetBitValue+0xe8>
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    1cd2:	e6 e3       	ldi	r30, 0x36	; 54
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_u8GetBitValue+0x96>
    1ce6:	55 95       	asr	r21
    1ce8:	47 95       	ror	r20
    1cea:	8a 95       	dec	r24
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <DIO_u8GetBitValue+0x92>
    1cee:	ca 01       	movw	r24, r20
    1cf0:	81 70       	andi	r24, 0x01	; 1
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	23 c0       	rjmp	.+70     	; 0x1d3c <DIO_u8GetBitValue+0xe8>
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    1cf6:	e3 e3       	ldi	r30, 0x33	; 51
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a9 01       	movw	r20, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_u8GetBitValue+0xba>
    1d0a:	55 95       	asr	r21
    1d0c:	47 95       	ror	r20
    1d0e:	8a 95       	dec	r24
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_u8GetBitValue+0xb6>
    1d12:	ca 01       	movw	r24, r20
    1d14:	81 70       	andi	r24, 0x01	; 1
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	11 c0       	rjmp	.+34     	; 0x1d3c <DIO_u8GetBitValue+0xe8>
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    1d1a:	e0 e3       	ldi	r30, 0x30	; 48
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a9 01       	movw	r20, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <DIO_u8GetBitValue+0xde>
    1d2e:	55 95       	asr	r21
    1d30:	47 95       	ror	r20
    1d32:	8a 95       	dec	r24
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <DIO_u8GetBitValue+0xda>
    1d36:	ca 01       	movw	r24, r20
    1d38:	81 70       	andi	r24, 0x01	; 1
    1d3a:	89 83       	std	Y+1, r24	; 0x01

		}
	}

	return Local_PinVal ;
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <DIO_voidToggelPin>:
}
 */

/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <DIO_voidToggelPin+0x6>
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <DIO_voidToggelPin+0x8>
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	6a 83       	std	Y+2, r22	; 0x02

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7)
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	88 30       	cpi	r24, 0x08	; 8
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <DIO_voidToggelPin+0x18>
    1d64:	6e c0       	rjmp	.+220    	; 0x1e42 <DIO_voidToggelPin+0xf4>
	{

		switch (copy_u8PortID)
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3c 83       	std	Y+4, r19	; 0x04
    1d6e:	2b 83       	std	Y+3, r18	; 0x03
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	49 f1       	breq	.+82     	; 0x1dcc <DIO_voidToggelPin+0x7e>
    1d7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <DIO_voidToggelPin+0x40>
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	61 f0       	breq	.+24     	; 0x1da4 <DIO_voidToggelPin+0x56>
    1d8c:	5a c0       	rjmp	.+180    	; 0x1e42 <DIO_voidToggelPin+0xf4>
    1d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d90:	3c 81       	ldd	r19, Y+4	; 0x04
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	71 f1       	breq	.+92     	; 0x1df4 <DIO_voidToggelPin+0xa6>
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	91 05       	cpc	r25, r1
    1da0:	e9 f1       	breq	.+122    	; 0x1e1c <DIO_voidToggelPin+0xce>
    1da2:	4f c0       	rjmp	.+158    	; 0x1e42 <DIO_voidToggelPin+0xf4>
		{
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    1da4:	ab e3       	ldi	r26, 0x3B	; 59
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	eb e3       	ldi	r30, 0x3B	; 59
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_voidToggelPin+0x74>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <DIO_voidToggelPin+0x70>
    1dc6:	84 27       	eor	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	3b c0       	rjmp	.+118    	; 0x1e42 <DIO_voidToggelPin+0xf4>
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    1dcc:	a8 e3       	ldi	r26, 0x38	; 56
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e8 e3       	ldi	r30, 0x38	; 56
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_voidToggelPin+0x9c>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_voidToggelPin+0x98>
    1dee:	84 27       	eor	r24, r20
    1df0:	8c 93       	st	X, r24
    1df2:	27 c0       	rjmp	.+78     	; 0x1e42 <DIO_voidToggelPin+0xf4>
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    1df4:	a5 e3       	ldi	r26, 0x35	; 53
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e5 e3       	ldi	r30, 0x35	; 53
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_voidToggelPin+0xc4>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <DIO_voidToggelPin+0xc0>
    1e16:	84 27       	eor	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	13 c0       	rjmp	.+38     	; 0x1e42 <DIO_voidToggelPin+0xf4>
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    1e1c:	a2 e3       	ldi	r26, 0x32	; 50
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e2 e3       	ldi	r30, 0x32	; 50
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_voidToggelPin+0xec>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_voidToggelPin+0xe8>
    1e3e:	84 27       	eor	r24, r20
    1e40:	8c 93       	st	X, r24
		}

	}
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <ADC_voidSetCallBack>:

static void (*ADC_CallBack)(void) = {NULL};
static u16 * ADC_po16DataResult = NULL ;

ACD_ERROR_RETURN ADC_voidSetCallBack(u16 *copy_po16Data, void (*ptr_adc)(void) )
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <ADC_voidSetCallBack+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <ADC_voidSetCallBack+0x8>
    1e58:	0f 92       	push	r0
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	9b 83       	std	Y+3, r25	; 0x03
    1e60:	8a 83       	std	Y+2, r24	; 0x02
    1e62:	7d 83       	std	Y+5, r23	; 0x05
    1e64:	6c 83       	std	Y+4, r22	; 0x04

	ACD_ERROR_RETURN local_error =OK ;
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	89 83       	std	Y+1, r24	; 0x01
	/*TO get ADC data */
	if( copy_po16Data != NULL )
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	39 f0       	breq	.+14     	; 0x1e80 <ADC_voidSetCallBack+0x30>
	{
		ADC_po16DataResult =copy_po16Data ;
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	90 93 9d 00 	sts	0x009D, r25
    1e7a:	80 93 9c 00 	sts	0x009C, r24
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <ADC_voidSetCallBack+0x32>
	}
	else
	{
		local_error =NULL_ERROR ;
    1e80:	19 82       	std	Y+1, r1	; 0x01
	}

	/*FOR notification */
	if(ptr_adc!=NULL)
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	9d 81       	ldd	r25, Y+5	; 0x05
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	39 f0       	breq	.+14     	; 0x1e98 <ADC_voidSetCallBack+0x48>
	{
		ADC_CallBack=ptr_adc;
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	90 93 9b 00 	sts	0x009B, r25
    1e92:	80 93 9a 00 	sts	0x009A, r24
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <ADC_voidSetCallBack+0x4a>
	}
	else
	{
		local_error =NULL_ERROR ;
    1e98:	19 82       	std	Y+1, r1	; 0x01
	}

	return  local_error ;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <__vector_16>:
/*****************************************************************************************/


void __vector_16() __attribute__((signal)) ;
void __vector_16 ()
{
    1eac:	1f 92       	push	r1
    1eae:	0f 92       	push	r0
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	0f 92       	push	r0
    1eb4:	11 24       	eor	r1, r1
    1eb6:	2f 93       	push	r18
    1eb8:	3f 93       	push	r19
    1eba:	4f 93       	push	r20
    1ebc:	5f 93       	push	r21
    1ebe:	6f 93       	push	r22
    1ec0:	7f 93       	push	r23
    1ec2:	8f 93       	push	r24
    1ec4:	9f 93       	push	r25
    1ec6:	af 93       	push	r26
    1ec8:	bf 93       	push	r27
    1eca:	ef 93       	push	r30
    1ecc:	ff 93       	push	r31
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
	if(ADC_po16DataResult != NULL)
    1ed6:	80 91 9c 00 	lds	r24, 0x009C
    1eda:	90 91 9d 00 	lds	r25, 0x009D
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	59 f0       	breq	.+22     	; 0x1ef8 <__vector_16+0x4c>
	{
		/*TO get ADC data */

#if TYPE_DATA ==RIGHT_DATA
		//store data from REG ( ADC_DATA )  to copy_Pu8Data
		(*ADC_po16DataResult) = ADC_DATA     ;
    1ee2:	e0 91 9c 00 	lds	r30, 0x009C
    1ee6:	f0 91 9d 00 	lds	r31, 0x009D
    1eea:	a4 e2       	ldi	r26, 0x24	; 36
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	8d 91       	ld	r24, X+
    1ef0:	9c 91       	ld	r25, X
    1ef2:	11 97       	sbiw	r26, 0x01	; 1
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
		(*ADC_po16DataResult) = (ADC_DATA>>6) ;
#endif

	}

	if(ADC_CallBack != NULL)
    1ef8:	80 91 9a 00 	lds	r24, 0x009A
    1efc:	90 91 9b 00 	lds	r25, 0x009B
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	29 f0       	breq	.+10     	; 0x1f0e <__vector_16+0x62>
	{
		/*FOR notification */
		ADC_CallBack();
    1f04:	e0 91 9a 00 	lds	r30, 0x009A
    1f08:	f0 91 9b 00 	lds	r31, 0x009B
    1f0c:	09 95       	icall
	}



}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	ff 91       	pop	r31
    1f14:	ef 91       	pop	r30
    1f16:	bf 91       	pop	r27
    1f18:	af 91       	pop	r26
    1f1a:	9f 91       	pop	r25
    1f1c:	8f 91       	pop	r24
    1f1e:	7f 91       	pop	r23
    1f20:	6f 91       	pop	r22
    1f22:	5f 91       	pop	r21
    1f24:	4f 91       	pop	r20
    1f26:	3f 91       	pop	r19
    1f28:	2f 91       	pop	r18
    1f2a:	0f 90       	pop	r0
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	0f 90       	pop	r0
    1f30:	1f 90       	pop	r1
    1f32:	18 95       	reti

00001f34 <ADC_voidInit>:
#endif
/*****************************************************************************************/

void ADC_voidInit()
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
	ADMUX_REG->ADLAR = TYPE_DATA ;
    1f3c:	e7 e2       	ldi	r30, 0x27	; 39
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8f 7d       	andi	r24, 0xDF	; 223
    1f44:	80 83       	st	Z, r24

	ADMUX_REG->REFS  = REF_VOLT  ;
    1f46:	e7 e2       	ldi	r30, 0x27	; 39
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8f 73       	andi	r24, 0x3F	; 63
    1f4e:	80 64       	ori	r24, 0x40	; 64
    1f50:	80 83       	st	Z, r24

	ADCSRA_REG->ADPS = PRSCALLER ;
    1f52:	e6 e2       	ldi	r30, 0x26	; 38
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	88 7f       	andi	r24, 0xF8	; 248
    1f5a:	82 60       	ori	r24, 0x02	; 2
    1f5c:	80 83       	st	Z, r24

	ADCSRA_REG->ADEN = EN        ;
    1f5e:	e6 e2       	ldi	r30, 0x26	; 38
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	80 68       	ori	r24, 0x80	; 128
    1f66:	80 83       	st	Z, r24

#ifdef ISR_ENABEL
	ADCSRA_REG->ADIE = EN        ;
    1f68:	e6 e2       	ldi	r30, 0x26	; 38
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	88 60       	ori	r24, 0x08	; 8
    1f70:	80 83       	st	Z, r24
#ifdef TRIGGER_ENABEL
	ADCSRA_REG->ADATE =EN ;
	SFIOR_REG->SFIOR_ADTS = TRIGGER_SOURCE;
#endif

}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <ADC_voidChannelSellect>:

/*****************************************************************************************/

/* Sellect one ADC Channel to work */
ACD_ERROR_RETURN ADC_voidChannelSellect(ACD_CHANNEL_NUM copy_u8ChannelSellect )
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <ADC_voidChannelSellect+0x6>
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	8a 83       	std	Y+2, r24	; 0x02
	ACD_ERROR_RETURN local_error =OK ;
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	89 83       	std	Y+1, r24	; 0x01
	if( ( copy_u8ChannelSellect<=7 )   )
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	88 30       	cpi	r24, 0x08	; 8
    1f8c:	58 f4       	brcc	.+22     	; 0x1fa4 <ADC_voidChannelSellect+0x2c>
	{


		ADMUX_REG->MUX = copy_u8ChannelSellect ;
    1f8e:	e7 e2       	ldi	r30, 0x27	; 39
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	8f 71       	andi	r24, 0x1F	; 31
    1f96:	98 2f       	mov	r25, r24
    1f98:	9f 71       	andi	r25, 0x1F	; 31
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 7e       	andi	r24, 0xE0	; 224
    1f9e:	89 2b       	or	r24, r25
    1fa0:	80 83       	st	Z, r24
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <ADC_voidChannelSellect+0x30>
	}
	else
	{
		local_error =NUM_OUT_OF_RANGE ;
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error ;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01

}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <ADC_StartConversionBoling>:

/*****************************************************************************************/

/* Start Conversion on ADC Channel  Sellected */
ACD_ERROR_RETURN ADC_StartConversionBoling(u16 *copy_Pu8Data)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	27 97       	sbiw	r28, 0x07	; 7
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	9f 83       	std	Y+7, r25	; 0x07
    1fca:	8e 83       	std	Y+6, r24	; 0x06
	u32 counter =0 ;
    1fcc:	1a 82       	std	Y+2, r1	; 0x02
    1fce:	1b 82       	std	Y+3, r1	; 0x03
    1fd0:	1c 82       	std	Y+4, r1	; 0x04
    1fd2:	1d 82       	std	Y+5, r1	; 0x05
	ACD_ERROR_RETURN local_error =OK ;
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	89 83       	std	Y+1, r24	; 0x01

	if(copy_Pu8Data != NULL)
    1fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fda:	9f 81       	ldd	r25, Y+7	; 0x07
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	d1 f1       	breq	.+116    	; 0x2054 <ADC_StartConversionBoling+0xa0>
	{
		// Start Conversion --- bit H
		ADCSRA_REG->ADSC = 1 ;
    1fe0:	e6 e2       	ldi	r30, 0x26	; 38
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 64       	ori	r24, 0x40	; 64
    1fe8:	80 83       	st	Z, r24
    1fea:	0b c0       	rjmp	.+22     	; 0x2002 <ADC_StartConversionBoling+0x4e>
		// wait for flag
		while ( (ADCSRA_REG->ADIF ==0) &&counter<=TIME_OUT )
		{
			counter ++ ;
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	ac 81       	ldd	r26, Y+4	; 0x04
    1ff2:	bd 81       	ldd	r27, Y+5	; 0x05
    1ff4:	01 96       	adiw	r24, 0x01	; 1
    1ff6:	a1 1d       	adc	r26, r1
    1ff8:	b1 1d       	adc	r27, r1
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
    1ffc:	9b 83       	std	Y+3, r25	; 0x03
    1ffe:	ac 83       	std	Y+4, r26	; 0x04
    2000:	bd 83       	std	Y+5, r27	; 0x05
	if(copy_Pu8Data != NULL)
	{
		// Start Conversion --- bit H
		ADCSRA_REG->ADSC = 1 ;
		// wait for flag
		while ( (ADCSRA_REG->ADIF ==0) &&counter<=TIME_OUT )
    2002:	e6 e2       	ldi	r30, 0x26	; 38
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 71       	andi	r24, 0x10	; 16
    200a:	88 23       	and	r24, r24
    200c:	61 f4       	brne	.+24     	; 0x2026 <ADC_StartConversionBoling+0x72>
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	9b 81       	ldd	r25, Y+3	; 0x03
    2012:	ac 81       	ldd	r26, Y+4	; 0x04
    2014:	bd 81       	ldd	r27, Y+5	; 0x05
    2016:	81 3a       	cpi	r24, 0xA1	; 161
    2018:	26 e8       	ldi	r18, 0x86	; 134
    201a:	92 07       	cpc	r25, r18
    201c:	21 e0       	ldi	r18, 0x01	; 1
    201e:	a2 07       	cpc	r26, r18
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	b2 07       	cpc	r27, r18
    2024:	18 f3       	brcs	.-58     	; 0x1fec <ADC_StartConversionBoling+0x38>
		{
			counter ++ ;
		}
		if((ADCSRA_REG->ADIF) ==1 )
    2026:	e6 e2       	ldi	r30, 0x26	; 38
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	80 71       	andi	r24, 0x10	; 16
    202e:	88 23       	and	r24, r24
    2030:	71 f0       	breq	.+28     	; 0x204e <ADC_StartConversionBoling+0x9a>
		{
			// Clear flag
			ADCSRA_REG->ADIF = 1 ;
    2032:	e6 e2       	ldi	r30, 0x26	; 38
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	80 61       	ori	r24, 0x10	; 16
    203a:	80 83       	st	Z, r24

        #if TYPE_DATA ==RIGHT_DATA
			//store data from REG ( ADC_DATA )  to copy_Pu8Data
			(*copy_Pu8Data) = ADC_DATA     ;
    203c:	e4 e2       	ldi	r30, 0x24	; 36
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	ee 81       	ldd	r30, Y+6	; 0x06
    2046:	ff 81       	ldd	r31, Y+7	; 0x07
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	80 83       	st	Z, r24
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <ADC_StartConversionBoling+0xa2>
       #endif
		}

		else
		{
			local_error=TIME_OUT_ERROR ;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <ADC_StartConversionBoling+0xa2>

	}

	else
	{
		local_error=NULL_ERROR ;
    2054:	19 82       	std	Y+1, r1	; 0x01
	}
	return  local_error ;
    2056:	89 81       	ldd	r24, Y+1	; 0x01
}
    2058:	27 96       	adiw	r28, 0x07	; 7
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <ADC_StartConversion>:
/*****************************************************************************************/
void ADC_StartConversion(void)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
	// Start Conversion --- bit H
	ADCSRA_REG->ADSC = 1 ;
    2072:	e6 e2       	ldi	r30, 0x26	; 38
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	80 64       	ori	r24, 0x40	; 64
    207a:	80 83       	st	Z, r24
}
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <ADC_voidChannelMulBoling>:



/* Read all   ADC Channel and store it in array */
ACD_ERROR_RETURN ADC_voidChannelMulBoling(u16 *copy_Pu8Data)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <ADC_voidChannelMulBoling+0x6>
    2088:	00 d0       	rcall	.+0      	; 0x208a <ADC_voidChannelMulBoling+0x8>
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
	u8 i =4 ;
    2092:	84 e0       	ldi	r24, 0x04	; 4
    2094:	8a 83       	std	Y+2, r24	; 0x02
	ACD_ERROR_RETURN local_error =OK ;
    2096:	82 e0       	ldi	r24, 0x02	; 2
    2098:	89 83       	std	Y+1, r24	; 0x01
	if(copy_Pu8Data!=NULL)
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	c1 f0       	breq	.+48     	; 0x20d2 <ADC_voidChannelMulBoling+0x50>
    20a2:	13 c0       	rjmp	.+38     	; 0x20ca <ADC_voidChannelMulBoling+0x48>
	{
		while(i!=0)
		{
			i-- ;
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	81 50       	subi	r24, 0x01	; 1
    20a8:	8a 83       	std	Y+2, r24	; 0x02
			ADC_voidChannelSellect(i);
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <ADC_voidChannelSellect>
			local_error =ADC_StartConversionBoling( (&copy_Pu8Data[i]) ) ;
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9c 01       	movw	r18, r24
    20b8:	22 0f       	add	r18, r18
    20ba:	33 1f       	adc	r19, r19
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	82 0f       	add	r24, r18
    20c2:	93 1f       	adc	r25, r19
    20c4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <ADC_StartConversionBoling>
    20c8:	89 83       	std	Y+1, r24	; 0x01
{
	u8 i =4 ;
	ACD_ERROR_RETURN local_error =OK ;
	if(copy_Pu8Data!=NULL)
	{
		while(i!=0)
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	88 23       	and	r24, r24
    20ce:	51 f7       	brne	.-44     	; 0x20a4 <ADC_voidChannelMulBoling+0x22>
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <ADC_voidChannelMulBoling+0x52>
		}

	}
	else
	{
		local_error =NULL_ERROR ;
    20d2:	19 82       	std	Y+1, r1	; 0x01
	}

	return  local_error ;
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <ADC_Mapping>:
/*****************************************************************************************/



u16 ADC_Mapping( u16 x1 ,u16 x2 , u16 y1 ,u16 y2)
{
    20e4:	ef 92       	push	r14
    20e6:	ff 92       	push	r15
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	2c 97       	sbiw	r28, 0x0c	; 12
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	78 87       	std	Y+8, r23	; 0x08
    2106:	6f 83       	std	Y+7, r22	; 0x07
    2108:	5a 87       	std	Y+10, r21	; 0x0a
    210a:	49 87       	std	Y+9, r20	; 0x09
    210c:	3c 87       	std	Y+12, r19	; 0x0c
    210e:	2b 87       	std	Y+11, r18	; 0x0b
	u16 data ;
	u16 local_adc_data = 0 ;
    2110:	1a 82       	std	Y+2, r1	; 0x02
    2112:	19 82       	std	Y+1, r1	; 0x01
#if TYPE_DATA ==RIGHT_DATA
	//store data from REG ( ADC_DATA )  to copy_Pu8Data
	local_adc_data = ADC_DATA     ;
    2114:	e4 e2       	ldi	r30, 0x24	; 36
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
#elif TYPE_DATA ==LEFT_DATA

	local_adc_data=((u16)ADC_DATA>>6) ;
#endif

	data =( ( (u32)(local_adc_data-x1)*(y2-y1) ) / (x2-x1) ) +y1 ;
    2120:	29 81       	ldd	r18, Y+1	; 0x01
    2122:	3a 81       	ldd	r19, Y+2	; 0x02
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	a9 01       	movw	r20, r18
    212a:	48 1b       	sub	r20, r24
    212c:	59 0b       	sbc	r21, r25
    212e:	ca 01       	movw	r24, r20
    2130:	7c 01       	movw	r14, r24
    2132:	00 e0       	ldi	r16, 0x00	; 0
    2134:	10 e0       	ldi	r17, 0x00	; 0
    2136:	2b 85       	ldd	r18, Y+11	; 0x0b
    2138:	3c 85       	ldd	r19, Y+12	; 0x0c
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	a9 01       	movw	r20, r18
    2140:	48 1b       	sub	r20, r24
    2142:	59 0b       	sbc	r21, r25
    2144:	ca 01       	movw	r24, r20
    2146:	9c 01       	movw	r18, r24
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	50 e0       	ldi	r21, 0x00	; 0
    214c:	c8 01       	movw	r24, r16
    214e:	b7 01       	movw	r22, r14
    2150:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__mulsi3>
    2154:	7b 01       	movw	r14, r22
    2156:	8c 01       	movw	r16, r24
    2158:	2f 81       	ldd	r18, Y+7	; 0x07
    215a:	38 85       	ldd	r19, Y+8	; 0x08
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	a9 01       	movw	r20, r18
    2162:	48 1b       	sub	r20, r24
    2164:	59 0b       	sbc	r21, r25
    2166:	ca 01       	movw	r24, r20
    2168:	9c 01       	movw	r18, r24
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	c8 01       	movw	r24, r16
    2170:	b7 01       	movw	r22, r14
    2172:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodsi4>
    2176:	da 01       	movw	r26, r20
    2178:	c9 01       	movw	r24, r18
    217a:	9c 01       	movw	r18, r24
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	82 0f       	add	r24, r18
    2182:	93 1f       	adc	r25, r19
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	8b 83       	std	Y+3, r24	; 0x03

	return  data ;
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    218c:	2c 96       	adiw	r28, 0x0c	; 12
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	08 95       	ret

000021a6 <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	2e 97       	sbiw	r28, 0x0e	; 14
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a0 ef       	ldi	r26, 0xF0	; 240
    21c0:	b1 e4       	ldi	r27, 0x41	; 65
    21c2:	8b 87       	std	Y+11, r24	; 0x0b
    21c4:	9c 87       	std	Y+12, r25	; 0x0c
    21c6:	ad 87       	std	Y+13, r26	; 0x0d
    21c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    21cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a ef       	ldi	r20, 0xFA	; 250
    21d8:	54 e4       	ldi	r21, 0x44	; 68
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8f 83       	std	Y+7, r24	; 0x07
    21e4:	98 87       	std	Y+8, r25	; 0x08
    21e6:	a9 87       	std	Y+9, r26	; 0x09
    21e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	2c f4       	brge	.+10     	; 0x220c <LCD_voidInit+0x66>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
    220a:	3f c0       	rjmp	.+126    	; 0x228a <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	4c f5       	brge	.+82     	; 0x2276 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	6b 85       	ldd	r22, Y+11	; 0x0b
    2226:	7c 85       	ldd	r23, Y+12	; 0x0c
    2228:	8d 85       	ldd	r24, Y+13	; 0x0d
    222a:	9e 85       	ldd	r25, Y+14	; 0x0e
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	0f c0       	rjmp	.+30     	; 0x226c <LCD_voidInit+0xc6>
    224e:	88 ec       	ldi	r24, 0xC8	; 200
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9c 83       	std	Y+4, r25	; 0x04
    2254:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <LCD_voidInit+0xb4>
    225e:	9c 83       	std	Y+4, r25	; 0x04
    2260:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	69 f7       	brne	.-38     	; 0x224e <LCD_voidInit+0xa8>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	6f 81       	ldd	r22, Y+7	; 0x07
    2278:	78 85       	ldd	r23, Y+8	; 0x08
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	9a 85       	ldd	r25, Y+10	; 0x0a
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <LCD_voidInit+0xf0>
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	65 e0       	ldi	r22, 0x05	; 5
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	64 e0       	ldi	r22, 0x04	; 4
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	61 e0       	ldi	r22, 0x01	; 1
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	62 e0       	ldi	r22, 0x02	; 2
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	63 e0       	ldi	r22, 0x03	; 3
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME );
    22da:	82 e0       	ldi	r24, 0x02	; 2
    22dc:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    22e0:	88 e2       	ldi	r24, 0x28	; 40
    22e2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    22e6:	8c e0       	ldi	r24, 0x0C	; 12
    22e8:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    22f2:	86 e0       	ldi	r24, 0x06	; 6
    22f4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_voidWriteCommand>

}
    22f8:	2e 96       	adiw	r28, 0x0e	; 14
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	6d 97       	sbiw	r28, 0x1d	; 29
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	8d 8f       	std	Y+29, r24	; 0x1d



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN7) );
    2320:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2322:	98 2f       	mov	r25, r24
    2324:	99 1f       	adc	r25, r25
    2326:	99 27       	eor	r25, r25
    2328:	99 1f       	adc	r25, r25
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	63 e0       	ldi	r22, 0x03	; 3
    232e:	49 2f       	mov	r20, r25
    2330:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN6) );
    2334:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2336:	82 95       	swap	r24
    2338:	86 95       	lsr	r24
    233a:	86 95       	lsr	r24
    233c:	83 70       	andi	r24, 0x03	; 3
    233e:	98 2f       	mov	r25, r24
    2340:	91 70       	andi	r25, 0x01	; 1
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	62 e0       	ldi	r22, 0x02	; 2
    2346:	49 2f       	mov	r20, r25
    2348:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN5) );
    234c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234e:	82 95       	swap	r24
    2350:	86 95       	lsr	r24
    2352:	87 70       	andi	r24, 0x07	; 7
    2354:	98 2f       	mov	r25, r24
    2356:	91 70       	andi	r25, 0x01	; 1
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	61 e0       	ldi	r22, 0x01	; 1
    235c:	49 2f       	mov	r20, r25
    235e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN4) );
    2362:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2364:	82 95       	swap	r24
    2366:	8f 70       	andi	r24, 0x0F	; 15
    2368:	98 2f       	mov	r25, r24
    236a:	91 70       	andi	r25, 0x01	; 1
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	60 e0       	ldi	r22, 0x00	; 0
    2370:	49 2f       	mov	r20, r25
    2372:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	64 e0       	ldi	r22, 0x04	; 4
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a0 e0       	ldi	r26, 0x00	; 0
    2386:	b0 e4       	ldi	r27, 0x40	; 64
    2388:	89 8f       	std	Y+25, r24	; 0x19
    238a:	9a 8f       	std	Y+26, r25	; 0x1a
    238c:	ab 8f       	std	Y+27, r26	; 0x1b
    238e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2390:	69 8d       	ldd	r22, Y+25	; 0x19
    2392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	4a ef       	ldi	r20, 0xFA	; 250
    239e:	54 e4       	ldi	r21, 0x44	; 68
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8d 8b       	std	Y+21, r24	; 0x15
    23aa:	9e 8b       	std	Y+22, r25	; 0x16
    23ac:	af 8b       	std	Y+23, r26	; 0x17
    23ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23b0:	6d 89       	ldd	r22, Y+21	; 0x15
    23b2:	7e 89       	ldd	r23, Y+22	; 0x16
    23b4:	8f 89       	ldd	r24, Y+23	; 0x17
    23b6:	98 8d       	ldd	r25, Y+24	; 0x18
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	2c f4       	brge	.+10     	; 0x23d2 <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	9c 8b       	std	Y+20, r25	; 0x14
    23ce:	8b 8b       	std	Y+19, r24	; 0x13
    23d0:	3f c0       	rjmp	.+126    	; 0x2450 <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    23d2:	6d 89       	ldd	r22, Y+21	; 0x15
    23d4:	7e 89       	ldd	r23, Y+22	; 0x16
    23d6:	8f 89       	ldd	r24, Y+23	; 0x17
    23d8:	98 8d       	ldd	r25, Y+24	; 0x18
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	3f ef       	ldi	r19, 0xFF	; 255
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	57 e4       	ldi	r21, 0x47	; 71
    23e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	4c f5       	brge	.+82     	; 0x243c <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ea:	69 8d       	ldd	r22, Y+25	; 0x19
    23ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e2       	ldi	r20, 0x20	; 32
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <LCD_voidWriteBitsToSend+0x128>
    2414:	88 ec       	ldi	r24, 0xC8	; 200
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9a 8b       	std	Y+18, r25	; 0x12
    241a:	89 8b       	std	Y+17, r24	; 0x11
    241c:	89 89       	ldd	r24, Y+17	; 0x11
    241e:	9a 89       	ldd	r25, Y+18	; 0x12
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <LCD_voidWriteBitsToSend+0x116>
    2424:	9a 8b       	std	Y+18, r25	; 0x12
    2426:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2428:	8b 89       	ldd	r24, Y+19	; 0x13
    242a:	9c 89       	ldd	r25, Y+20	; 0x14
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	9c 8b       	std	Y+20, r25	; 0x14
    2430:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2432:	8b 89       	ldd	r24, Y+19	; 0x13
    2434:	9c 89       	ldd	r25, Y+20	; 0x14
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	69 f7       	brne	.-38     	; 0x2414 <LCD_voidWriteBitsToSend+0x10a>
    243a:	14 c0       	rjmp	.+40     	; 0x2464 <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243c:	6d 89       	ldd	r22, Y+21	; 0x15
    243e:	7e 89       	ldd	r23, Y+22	; 0x16
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9c 8b       	std	Y+20, r25	; 0x14
    244e:	8b 8b       	std	Y+19, r24	; 0x13
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	9c 89       	ldd	r25, Y+20	; 0x14
    2454:	98 8b       	std	Y+16, r25	; 0x10
    2456:	8f 87       	std	Y+15, r24	; 0x0f
    2458:	8f 85       	ldd	r24, Y+15	; 0x0f
    245a:	98 89       	ldd	r25, Y+16	; 0x10
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_voidWriteBitsToSend+0x152>
    2460:	98 8b       	std	Y+16, r25	; 0x10
    2462:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	64 e0       	ldi	r22, 0x04	; 4
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN3) );
    246e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2470:	86 95       	lsr	r24
    2472:	86 95       	lsr	r24
    2474:	86 95       	lsr	r24
    2476:	98 2f       	mov	r25, r24
    2478:	91 70       	andi	r25, 0x01	; 1
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	63 e0       	ldi	r22, 0x03	; 3
    247e:	49 2f       	mov	r20, r25
    2480:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN2) );
    2484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2486:	86 95       	lsr	r24
    2488:	86 95       	lsr	r24
    248a:	98 2f       	mov	r25, r24
    248c:	91 70       	andi	r25, 0x01	; 1
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	62 e0       	ldi	r22, 0x02	; 2
    2492:	49 2f       	mov	r20, r25
    2494:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN1) );
    2498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    249a:	86 95       	lsr	r24
    249c:	98 2f       	mov	r25, r24
    249e:	91 70       	andi	r25, 0x01	; 1
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	61 e0       	ldi	r22, 0x01	; 1
    24a4:	49 2f       	mov	r20, r25
    24a6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN0) );
    24aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ac:	98 2f       	mov	r25, r24
    24ae:	91 70       	andi	r25, 0x01	; 1
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	49 2f       	mov	r20, r25
    24b6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	64 e0       	ldi	r22, 0x04	; 4
    24be:	41 e0       	ldi	r20, 0x01	; 1
    24c0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a0 e0       	ldi	r26, 0x00	; 0
    24ca:	b0 e4       	ldi	r27, 0x40	; 64
    24cc:	8b 87       	std	Y+11, r24	; 0x0b
    24ce:	9c 87       	std	Y+12, r25	; 0x0c
    24d0:	ad 87       	std	Y+13, r26	; 0x0d
    24d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24da:	9e 85       	ldd	r25, Y+14	; 0x0e
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4a ef       	ldi	r20, 0xFA	; 250
    24e2:	54 e4       	ldi	r21, 0x44	; 68
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8f 83       	std	Y+7, r24	; 0x07
    24ee:	98 87       	std	Y+8, r25	; 0x08
    24f0:	a9 87       	std	Y+9, r26	; 0x09
    24f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	5f e3       	ldi	r21, 0x3F	; 63
    2504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2508:	88 23       	and	r24, r24
    250a:	2c f4       	brge	.+10     	; 0x2516 <LCD_voidWriteBitsToSend+0x20c>
		__ticks = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	3f c0       	rjmp	.+126    	; 0x2594 <LCD_voidWriteBitsToSend+0x28a>
	else if (__tmp > 65535)
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	4c f5       	brge	.+82     	; 0x2580 <LCD_voidWriteBitsToSend+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2530:	7c 85       	ldd	r23, Y+12	; 0x0c
    2532:	8d 85       	ldd	r24, Y+13	; 0x0d
    2534:	9e 85       	ldd	r25, Y+14	; 0x0e
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <LCD_voidWriteBitsToSend+0x26c>
    2558:	88 ec       	ldi	r24, 0xC8	; 200
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <LCD_voidWriteBitsToSend+0x25a>
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	69 f7       	brne	.-38     	; 0x2558 <LCD_voidWriteBitsToSend+0x24e>
    257e:	14 c0       	rjmp	.+40     	; 0x25a8 <LCD_voidWriteBitsToSend+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2580:	6f 81       	ldd	r22, Y+7	; 0x07
    2582:	78 85       	ldd	r23, Y+8	; 0x08
    2584:	89 85       	ldd	r24, Y+9	; 0x09
    2586:	9a 85       	ldd	r25, Y+10	; 0x0a
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	8d 81       	ldd	r24, Y+5	; 0x05
    2596:	9e 81       	ldd	r25, Y+6	; 0x06
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_voidWriteBitsToSend+0x296>
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	64 e0       	ldi	r22, 0x04	; 4
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>




}
    25b2:	6d 96       	adiw	r28, 0x1d	; 29
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	0f 92       	push	r0
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	65 e0       	ldi	r22, 0x05	; 5
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_voidWriteBitsToSend>
}
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	0f 92       	push	r0
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	65 e0       	ldi	r22, 0x05	; 5
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_voidWriteBitsToSend>
}
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	00 d0       	rcall	.+0      	; 0x2612 <LCD_voidWriteString+0x6>
    2612:	00 d0       	rcall	.+0      	; 0x2614 <LCD_voidWriteString+0x8>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	8b 83       	std	Y+3, r24	; 0x03

	u16 i= ZERO;
    261c:	1a 82       	std	Y+2, r1	; 0x02
    261e:	19 82       	std	Y+1, r1	; 0x01
    2620:	0f c0       	rjmp	.+30     	; 0x2640 <LCD_voidWriteString+0x34>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    2622:	2b 81       	ldd	r18, Y+3	; 0x03
    2624:	3c 81       	ldd	r19, Y+4	; 0x04
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	f9 01       	movw	r30, r18
    262c:	e8 0f       	add	r30, r24
    262e:	f9 1f       	adc	r31, r25
    2630:	80 81       	ld	r24, Z
    2632:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <LCD_voidWriteData>
		i++;
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	01 96       	adiw	r24, 0x01	; 1
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    2640:	2b 81       	ldd	r18, Y+3	; 0x03
    2642:	3c 81       	ldd	r19, Y+4	; 0x04
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	f9 01       	movw	r30, r18
    264a:	e8 0f       	add	r30, r24
    264c:	f9 1f       	adc	r31, r25
    264e:	80 81       	ld	r24, Z
    2650:	88 23       	and	r24, r24
    2652:	39 f7       	brne	.-50     	; 0x2622 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	27 97       	sbiw	r28, 0x07	; 7
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	8e 83       	std	Y+6, r24	; 0x06
    2678:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    267a:	1a 82       	std	Y+2, r1	; 0x02
    267c:	80 e4       	ldi	r24, 0x40	; 64
    267e:	8b 83       	std	Y+3, r24	; 0x03
    2680:	84 e1       	ldi	r24, 0x14	; 20
    2682:	8c 83       	std	Y+4, r24	; 0x04
    2684:	84 e5       	ldi	r24, 0x54	; 84
    2686:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    2688:	8e 81       	ldd	r24, Y+6	; 0x06
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	ce 01       	movw	r24, r28
    2690:	02 96       	adiw	r24, 0x02	; 2
    2692:	fc 01       	movw	r30, r24
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	90 81       	ld	r25, Z
    269a:	8f 81       	ldd	r24, Y+7	; 0x07
    269c:	89 0f       	add	r24, r25
    269e:	80 58       	subi	r24, 0x80	; 128
    26a0:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address) ;
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_voidWriteCommand>

}
    26a8:	27 96       	adiw	r28, 0x07	; 7
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <LCD_voidClear>:
}
 */
/***********************************************************************************/

void LCD_voidClear(void)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_voidWriteCommand>

}
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	63 97       	sbiw	r28, 0x13	; 19
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	68 8b       	std	Y+16, r22	; 0x10
    26e8:	79 8b       	std	Y+17, r23	; 0x11
    26ea:	8a 8b       	std	Y+18, r24	; 0x12
    26ec:	9b 8b       	std	Y+19, r25	; 0x13
	u32 LOCAL_NUMBER=Copy_u8num ;
    26ee:	88 89       	ldd	r24, Y+16	; 0x10
    26f0:	99 89       	ldd	r25, Y+17	; 0x11
    26f2:	aa 89       	ldd	r26, Y+18	; 0x12
    26f4:	bb 89       	ldd	r27, Y+19	; 0x13
    26f6:	8a 83       	std	Y+2, r24	; 0x02
    26f8:	9b 83       	std	Y+3, r25	; 0x03
    26fa:	ac 83       	std	Y+4, r26	; 0x04
    26fc:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    26fe:	19 82       	std	Y+1, r1	; 0x01


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	08 2f       	mov	r16, r24
    2704:	10 e0       	ldi	r17, 0x00	; 0
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	9b 81       	ldd	r25, Y+3	; 0x03
    270a:	ac 81       	ldd	r26, Y+4	; 0x04
    270c:	bd 81       	ldd	r27, Y+5	; 0x05
    270e:	2a e0       	ldi	r18, 0x0A	; 10
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodsi4>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	28 2f       	mov	r18, r24
    2724:	20 5d       	subi	r18, 0xD0	; 208
    2726:	ce 01       	movw	r24, r28
    2728:	06 96       	adiw	r24, 0x06	; 6
    272a:	fc 01       	movw	r30, r24
    272c:	e0 0f       	add	r30, r16
    272e:	f1 1f       	adc	r31, r17
    2730:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	9b 81       	ldd	r25, Y+3	; 0x03
    2736:	ac 81       	ldd	r26, Y+4	; 0x04
    2738:	bd 81       	ldd	r27, Y+5	; 0x05
    273a:	2a e0       	ldi	r18, 0x0A	; 10
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodsi4>
    274a:	da 01       	movw	r26, r20
    274c:	c9 01       	movw	r24, r18
    274e:	8a 83       	std	Y+2, r24	; 0x02
    2750:	9b 83       	std	Y+3, r25	; 0x03
    2752:	ac 83       	std	Y+4, r26	; 0x04
    2754:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=ZERO);
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	9b 81       	ldd	r25, Y+3	; 0x03
    2760:	ac 81       	ldd	r26, Y+4	; 0x04
    2762:	bd 81       	ldd	r27, Y+5	; 0x05
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	a1 05       	cpc	r26, r1
    2768:	b1 05       	cpc	r27, r1
    276a:	51 f6       	brne	.-108    	; 0x2700 <LCD_voidWriteNumber+0x32>
    276c:	11 c0       	rjmp	.+34     	; 0x2790 <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	88 2f       	mov	r24, r24
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9c 01       	movw	r18, r24
    2776:	21 50       	subi	r18, 0x01	; 1
    2778:	30 40       	sbci	r19, 0x00	; 0
    277a:	ce 01       	movw	r24, r28
    277c:	06 96       	adiw	r24, 0x06	; 6
    277e:	fc 01       	movw	r30, r24
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	80 81       	ld	r24, Z
    2786:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	81 50       	subi	r24, 0x01	; 1
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	88 23       	and	r24, r24
    2794:	61 f7       	brne	.-40     	; 0x276e <LCD_voidWriteNumber+0xa0>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    2796:	63 96       	adiw	r28, 0x13	; 19
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	1f 91       	pop	r17
    27a8:	0f 91       	pop	r16
    27aa:	08 95       	ret

000027ac <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <LCD_voidWriteSpecialCharToCGRAM+0x6>
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <LCD_voidWriteSpecialCharToCGRAM+0x8>
    27b4:	0f 92       	push	r0
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	9c 83       	std	Y+4, r25	; 0x04
    27bc:	8b 83       	std	Y+3, r24	; 0x03
    27be:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    27c0:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	08 96       	adiw	r24, 0x08	; 8
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <LCD_voidWriteCommand>


	for(counter=ZERO;counter<EIGHT;counter++)
    27de:	19 82       	std	Y+1, r1	; 0x01
    27e0:	0e c0       	rjmp	.+28     	; 0x27fe <LCD_voidWriteSpecialCharToCGRAM+0x52>
	{
		LCD_voidWriteData(copy_u8data[counter]);
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	fc 01       	movw	r30, r24
    27ee:	e2 0f       	add	r30, r18
    27f0:	f3 1f       	adc	r31, r19
    27f2:	80 81       	ld	r24, Z
    27f4:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <LCD_voidWriteData>
	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;


	for(counter=ZERO;counter<EIGHT;counter++)
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	88 30       	cpi	r24, 0x08	; 8
    2802:	78 f3       	brcs	.-34     	; 0x27e2 <LCD_voidWriteSpecialCharToCGRAM+0x36>
	{
		LCD_voidWriteData(copy_u8data[counter]);
	}

}
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	0f 92       	push	r0
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(copy_u8ByteNum);
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <LCD_voidWriteData>

}
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <KPD_voidInit>:
 *                             Public Function Definition                            *
 *************************************************************************************/


void KPD_voidInit(void)
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	0f 92       	push	r0
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62

	u8 counter = ZERO ;
    2838:	19 82       	std	Y+1, r1	; 0x01

	for( counter=ZERO ; counter<ROW_SIZE ; counter++ )
    283a:	19 82       	std	Y+1, r1	; 0x01
    283c:	29 c0       	rjmp	.+82     	; 0x2890 <KPD_voidInit+0x62>
	{
		DIO_voidSetPinDirection( arr_ROW_port[counter] , arr_ROW_pins[counter] , PIN_OUTPUT ) ;
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	88 2f       	mov	r24, r24
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	fc 01       	movw	r30, r24
    2846:	e1 58       	subi	r30, 0x81	; 129
    2848:	ff 4f       	sbci	r31, 0xFF	; 255
    284a:	20 81       	ld	r18, Z
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	88 2f       	mov	r24, r24
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	fc 01       	movw	r30, r24
    2854:	e5 58       	subi	r30, 0x85	; 133
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	90 81       	ld	r25, Z
    285a:	82 2f       	mov	r24, r18
    285c:	69 2f       	mov	r22, r25
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue( arr_ROW_port[counter] , arr_ROW_pins[counter] , PIN_HIGH ) ;
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	88 2f       	mov	r24, r24
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	fc 01       	movw	r30, r24
    286c:	e1 58       	subi	r30, 0x81	; 129
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	20 81       	ld	r18, Z
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	fc 01       	movw	r30, r24
    287a:	e5 58       	subi	r30, 0x85	; 133
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	90 81       	ld	r25, Z
    2880:	82 2f       	mov	r24, r18
    2882:	69 2f       	mov	r22, r25
    2884:	41 e0       	ldi	r20, 0x01	; 1
    2886:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
void KPD_voidInit(void)
{

	u8 counter = ZERO ;

	for( counter=ZERO ; counter<ROW_SIZE ; counter++ )
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	84 30       	cpi	r24, 0x04	; 4
    2894:	a0 f2       	brcs	.-88     	; 0x283e <KPD_voidInit+0x10>
	{
		DIO_voidSetPinDirection( arr_ROW_port[counter] , arr_ROW_pins[counter] , PIN_OUTPUT ) ;
		DIO_voidSetPinValue( arr_ROW_port[counter] , arr_ROW_pins[counter] , PIN_HIGH ) ;
	}

	for( counter=ZERO ; counter<COL_SIZE ; counter++ )
    2896:	19 82       	std	Y+1, r1	; 0x01
    2898:	29 c0       	rjmp	.+82     	; 0x28ec <KPD_voidInit+0xbe>
	{

		DIO_voidSetPinDirection( arr_COL_port[counter] , arr_COL_pins[counter] , PIN_INPUT ) ;
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	88 2f       	mov	r24, r24
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	fc 01       	movw	r30, r24
    28a2:	e9 58       	subi	r30, 0x89	; 137
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	20 81       	ld	r18, Z
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	fc 01       	movw	r30, r24
    28b0:	ed 58       	subi	r30, 0x8D	; 141
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	90 81       	ld	r25, Z
    28b6:	82 2f       	mov	r24, r18
    28b8:	69 2f       	mov	r22, r25
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	0e 94 22 0c 	call	0x1844	; 0x1844 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue( arr_COL_port[counter] ,arr_COL_pins[counter] , PIN_HIGH ) ;
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	88 2f       	mov	r24, r24
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	fc 01       	movw	r30, r24
    28c8:	e9 58       	subi	r30, 0x89	; 137
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	20 81       	ld	r18, Z
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	88 2f       	mov	r24, r24
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	fc 01       	movw	r30, r24
    28d6:	ed 58       	subi	r30, 0x8D	; 141
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	90 81       	ld	r25, Z
    28dc:	82 2f       	mov	r24, r18
    28de:	69 2f       	mov	r22, r25
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
	{
		DIO_voidSetPinDirection( arr_ROW_port[counter] , arr_ROW_pins[counter] , PIN_OUTPUT ) ;
		DIO_voidSetPinValue( arr_ROW_port[counter] , arr_ROW_pins[counter] , PIN_HIGH ) ;
	}

	for( counter=ZERO ; counter<COL_SIZE ; counter++ )
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	8f 5f       	subi	r24, 0xFF	; 255
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	84 30       	cpi	r24, 0x04	; 4
    28f0:	a0 f2       	brcs	.-88     	; 0x289a <KPD_voidInit+0x6c>
		DIO_voidSetPinValue( arr_COL_port[counter] ,arr_COL_pins[counter] , PIN_HIGH ) ;

	}


}
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <KPD_voidGetPressedKey>:


/*****************************************************************************************/
u8 KPD_voidGetPressedKey(void)
{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	69 97       	sbiw	r28, 0x19	; 25
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
	u8 counter1 ;                 //counter loop1
	u8 counter2 ;                 //counter loop2
	u8 get_key=KPD_NOT_PRESSED ;  //init val
    290e:	8f ef       	ldi	r24, 0xFF	; 255
    2910:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_val ;                  // to get val of pin if 0 or 1

	u8 SwitchVal[ROW_SIZE][COL_SIZE] = KEYPAD_ARR_VAL ;
    2912:	ce 01       	movw	r24, r28
    2914:	05 96       	adiw	r24, 0x05	; 5
    2916:	9e 8b       	std	Y+22, r25	; 0x16
    2918:	8d 8b       	std	Y+21, r24	; 0x15
    291a:	e3 e8       	ldi	r30, 0x83	; 131
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	f8 8f       	std	Y+24, r31	; 0x18
    2920:	ef 8b       	std	Y+23, r30	; 0x17
    2922:	f0 e1       	ldi	r31, 0x10	; 16
    2924:	f9 8f       	std	Y+25, r31	; 0x19
    2926:	ef 89       	ldd	r30, Y+23	; 0x17
    2928:	f8 8d       	ldd	r31, Y+24	; 0x18
    292a:	00 80       	ld	r0, Z
    292c:	8f 89       	ldd	r24, Y+23	; 0x17
    292e:	98 8d       	ldd	r25, Y+24	; 0x18
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	98 8f       	std	Y+24, r25	; 0x18
    2934:	8f 8b       	std	Y+23, r24	; 0x17
    2936:	ed 89       	ldd	r30, Y+21	; 0x15
    2938:	fe 89       	ldd	r31, Y+22	; 0x16
    293a:	00 82       	st	Z, r0
    293c:	8d 89       	ldd	r24, Y+21	; 0x15
    293e:	9e 89       	ldd	r25, Y+22	; 0x16
    2940:	01 96       	adiw	r24, 0x01	; 1
    2942:	9e 8b       	std	Y+22, r25	; 0x16
    2944:	8d 8b       	std	Y+21, r24	; 0x15
    2946:	99 8d       	ldd	r25, Y+25	; 0x19
    2948:	91 50       	subi	r25, 0x01	; 1
    294a:	99 8f       	std	Y+25, r25	; 0x19
    294c:	e9 8d       	ldd	r30, Y+25	; 0x19
    294e:	ee 23       	and	r30, r30
    2950:	51 f7       	brne	.-44     	; 0x2926 <KPD_voidGetPressedKey+0x2c>

	for(counter1=ZERO ; counter1 < ROW_SIZE ; counter1++ )
    2952:	1c 82       	std	Y+4, r1	; 0x04
    2954:	77 c0       	rjmp	.+238    	; 0x2a44 <KPD_voidGetPressedKey+0x14a>
	{
		DIO_voidSetPinValue(arr_ROW_port[counter1],arr_ROW_pins[counter1],PIN_LOW);
    2956:	8c 81       	ldd	r24, Y+4	; 0x04
    2958:	88 2f       	mov	r24, r24
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	fc 01       	movw	r30, r24
    295e:	e1 58       	subi	r30, 0x81	; 129
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	20 81       	ld	r18, Z
    2964:	8c 81       	ldd	r24, Y+4	; 0x04
    2966:	88 2f       	mov	r24, r24
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	fc 01       	movw	r30, r24
    296c:	e5 58       	subi	r30, 0x85	; 133
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	90 81       	ld	r25, Z
    2972:	82 2f       	mov	r24, r18
    2974:	69 2f       	mov	r22, r25
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>

		for(counter2=ZERO ; counter2 < COL_SIZE ; counter2++ )
    297c:	1b 82       	std	Y+3, r1	; 0x03
    297e:	45 c0       	rjmp	.+138    	; 0x2a0a <KPD_voidGetPressedKey+0x110>
		{

			pin_val= DIO_u8GetBitValue( ( arr_COL_port[counter2] ) , (arr_COL_pins[counter2]) );
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	88 2f       	mov	r24, r24
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	fc 01       	movw	r30, r24
    2988:	e9 58       	subi	r30, 0x89	; 137
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	20 81       	ld	r18, Z
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	88 2f       	mov	r24, r24
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	fc 01       	movw	r30, r24
    2996:	ed 58       	subi	r30, 0x8D	; 141
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	90 81       	ld	r25, Z
    299c:	82 2f       	mov	r24, r18
    299e:	69 2f       	mov	r22, r25
    29a0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <DIO_u8GetBitValue>
    29a4:	89 83       	std	Y+1, r24	; 0x01

			if(pin_val==KPD_PRESSED)
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	88 23       	and	r24, r24
    29aa:	61 f5       	brne	.+88     	; 0x2a04 <KPD_voidGetPressedKey+0x10a>
			{
				get_key=SwitchVal[counter1][counter2]  ;
    29ac:	8c 81       	ldd	r24, Y+4	; 0x04
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	48 2f       	mov	r20, r24
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	22 0f       	add	r18, r18
    29ba:	33 1f       	adc	r19, r19
    29bc:	22 0f       	add	r18, r18
    29be:	33 1f       	adc	r19, r19
    29c0:	ce 01       	movw	r24, r28
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	82 0f       	add	r24, r18
    29c6:	93 1f       	adc	r25, r19
    29c8:	84 0f       	add	r24, r20
    29ca:	95 1f       	adc	r25, r21
    29cc:	fc 01       	movw	r30, r24
    29ce:	34 96       	adiw	r30, 0x04	; 4
    29d0:	80 81       	ld	r24, Z
    29d2:	8a 83       	std	Y+2, r24	; 0x02
    29d4:	13 c0       	rjmp	.+38     	; 0x29fc <KPD_voidGetPressedKey+0x102>

				while(pin_val==KPD_PRESSED)
				{
					pin_val=DIO_u8GetBitValue( ( arr_COL_port[counter2] ) , (arr_COL_pins[counter2]) );
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	fc 01       	movw	r30, r24
    29de:	e9 58       	subi	r30, 0x89	; 137
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	20 81       	ld	r18, Z
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	88 2f       	mov	r24, r24
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	fc 01       	movw	r30, r24
    29ec:	ed 58       	subi	r30, 0x8D	; 141
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	90 81       	ld	r25, Z
    29f2:	82 2f       	mov	r24, r18
    29f4:	69 2f       	mov	r22, r25
    29f6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <DIO_u8GetBitValue>
    29fa:	89 83       	std	Y+1, r24	; 0x01

			if(pin_val==KPD_PRESSED)
			{
				get_key=SwitchVal[counter1][counter2]  ;

				while(pin_val==KPD_PRESSED)
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	88 23       	and	r24, r24
    2a00:	51 f3       	breq	.-44     	; 0x29d6 <KPD_voidGetPressedKey+0xdc>
    2a02:	07 c0       	rjmp	.+14     	; 0x2a12 <KPD_voidGetPressedKey+0x118>

	for(counter1=ZERO ; counter1 < ROW_SIZE ; counter1++ )
	{
		DIO_voidSetPinValue(arr_ROW_port[counter1],arr_ROW_pins[counter1],PIN_LOW);

		for(counter2=ZERO ; counter2 < COL_SIZE ; counter2++ )
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	8f 5f       	subi	r24, 0xFF	; 255
    2a08:	8b 83       	std	Y+3, r24	; 0x03
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	84 30       	cpi	r24, 0x04	; 4
    2a0e:	08 f4       	brcc	.+2      	; 0x2a12 <KPD_voidGetPressedKey+0x118>
    2a10:	b7 cf       	rjmp	.-146    	; 0x2980 <KPD_voidGetPressedKey+0x86>
				break ;
			}

		}

		DIO_voidSetPinValue(arr_ROW_port[counter1],arr_ROW_pins[counter1],PIN_HIGH);
    2a12:	8c 81       	ldd	r24, Y+4	; 0x04
    2a14:	88 2f       	mov	r24, r24
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	fc 01       	movw	r30, r24
    2a1a:	e1 58       	subi	r30, 0x81	; 129
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	20 81       	ld	r18, Z
    2a20:	8c 81       	ldd	r24, Y+4	; 0x04
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	fc 01       	movw	r30, r24
    2a28:	e5 58       	subi	r30, 0x85	; 133
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	90 81       	ld	r25, Z
    2a2e:	82 2f       	mov	r24, r18
    2a30:	69 2f       	mov	r22, r25
    2a32:	41 e0       	ldi	r20, 0x01	; 1
    2a34:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <DIO_voidSetPinValue>
		if(get_key!=0xff)
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2a3c:	39 f4       	brne	.+14     	; 0x2a4c <KPD_voidGetPressedKey+0x152>
	u8 get_key=KPD_NOT_PRESSED ;  //init val
	u8 pin_val ;                  // to get val of pin if 0 or 1

	u8 SwitchVal[ROW_SIZE][COL_SIZE] = KEYPAD_ARR_VAL ;

	for(counter1=ZERO ; counter1 < ROW_SIZE ; counter1++ )
    2a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a40:	8f 5f       	subi	r24, 0xFF	; 255
    2a42:	8c 83       	std	Y+4, r24	; 0x04
    2a44:	8c 81       	ldd	r24, Y+4	; 0x04
    2a46:	84 30       	cpi	r24, 0x04	; 4
    2a48:	08 f4       	brcc	.+2      	; 0x2a4c <KPD_voidGetPressedKey+0x152>
    2a4a:	85 cf       	rjmp	.-246    	; 0x2956 <KPD_voidGetPressedKey+0x5c>


	}


	return get_key;
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2a4e:	69 96       	adiw	r28, 0x19	; 25
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <H_EXT_EEPROM_void_Init>:




void H_EXT_EEPROM_void_Init(void)
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
	M_TWI_void_Init();
    2a68:	0e 94 c0 08 	call	0x1180	; 0x1180 <M_TWI_void_Init>
}
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <H_EXT_EEPROM_void_Write>:


/***************************************************************************/

void H_EXT_EEPROM_void_Write(u16 Copy_u16ByteNo , u8 Copy_u8Data,u8 EP_NUM)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	62 97       	sbiw	r28, 0x12	; 18
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	98 8b       	std	Y+16, r25	; 0x10
    2a88:	8f 87       	std	Y+15, r24	; 0x0f
    2a8a:	69 8b       	std	Y+17, r22	; 0x11
    2a8c:	4a 8b       	std	Y+18, r20	; 0x12
 * for ex 900 ->  00000011 10000100
 * Copy_u8Data -> 'M'
 * EP_NUM EEPROM Number 0 or 1  for ex 1
 * */

M_TWI_u8_StartCondition();
    2a8e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <M_TWI_u8_StartCondition>
                             /* For ex :      01010000 |   00000011 |00000100   = 01010111     */
M_TWI_u8_SendSlaveAddressWrite( EXT_EEPROM_ADDRESS_SEQ | (u8)(Copy_u16ByteNo>>8)|(EP_NUM<<2)  );
    2a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a94:	98 89       	ldd	r25, Y+16	; 0x10
    2a96:	89 2f       	mov	r24, r25
    2a98:	99 27       	eor	r25, r25
    2a9a:	80 65       	ori	r24, 0x50	; 80
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	8a 89       	ldd	r24, Y+18	; 0x12
    2aa2:	88 2f       	mov	r24, r24
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	82 2b       	or	r24, r18
    2ab0:	93 2b       	or	r25, r19
    2ab2:	0e 94 3d 09 	call	0x127a	; 0x127a <M_TWI_u8_SendSlaveAddressWrite>

M_TWI_u8_SendByte( (u8)Copy_u16ByteNo);  /* For ex :     10000100    */
    2ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 ac 09 	call	0x1358	; 0x1358 <M_TWI_u8_SendByte>

M_TWI_u8_SendByte(Copy_u8Data); /* For ex : 'M'   */
    2ac0:	89 89       	ldd	r24, Y+17	; 0x11
    2ac2:	88 2f       	mov	r24, r24
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	0e 94 ac 09 	call	0x1358	; 0x1358 <M_TWI_u8_SendByte>

M_TWI_void_StopCondition();
    2aca:	0e 94 fd 08 	call	0x11fa	; 0x11fa <M_TWI_void_StopCondition>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a0 e2       	ldi	r26, 0x20	; 32
    2ad4:	b1 e4       	ldi	r27, 0x41	; 65
    2ad6:	8b 87       	std	Y+11, r24	; 0x0b
    2ad8:	9c 87       	std	Y+12, r25	; 0x0c
    2ada:	ad 87       	std	Y+13, r26	; 0x0d
    2adc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a ef       	ldi	r20, 0xFA	; 250
    2aec:	54 e4       	ldi	r21, 0x44	; 68
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	8f 83       	std	Y+7, r24	; 0x07
    2af8:	98 87       	std	Y+8, r25	; 0x08
    2afa:	a9 87       	std	Y+9, r26	; 0x09
    2afc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <H_EXT_EEPROM_void_Write+0xae>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	3f c0       	rjmp	.+126    	; 0x2b9e <H_EXT_EEPROM_void_Write+0x12c>
	else if (__tmp > 65535)
    2b20:	6f 81       	ldd	r22, Y+7	; 0x07
    2b22:	78 85       	ldd	r23, Y+8	; 0x08
    2b24:	89 85       	ldd	r24, Y+9	; 0x09
    2b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	3f ef       	ldi	r19, 0xFF	; 255
    2b2c:	4f e7       	ldi	r20, 0x7F	; 127
    2b2e:	57 e4       	ldi	r21, 0x47	; 71
    2b30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b34:	18 16       	cp	r1, r24
    2b36:	4c f5       	brge	.+82     	; 0x2b8a <H_EXT_EEPROM_void_Write+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e2       	ldi	r20, 0x20	; 32
    2b46:	51 e4       	ldi	r21, 0x41	; 65
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <H_EXT_EEPROM_void_Write+0x10e>
    2b62:	88 ec       	ldi	r24, 0xC8	; 200
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	9c 83       	std	Y+4, r25	; 0x04
    2b68:	8b 83       	std	Y+3, r24	; 0x03
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <H_EXT_EEPROM_void_Write+0xfc>
    2b72:	9c 83       	std	Y+4, r25	; 0x04
    2b74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b80:	8d 81       	ldd	r24, Y+5	; 0x05
    2b82:	9e 81       	ldd	r25, Y+6	; 0x06
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	69 f7       	brne	.-38     	; 0x2b62 <H_EXT_EEPROM_void_Write+0xf0>
    2b88:	14 c0       	rjmp	.+40     	; 0x2bb2 <H_EXT_EEPROM_void_Write+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8c:	78 85       	ldd	r23, Y+8	; 0x08
    2b8e:	89 85       	ldd	r24, Y+9	; 0x09
    2b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9e 83       	std	Y+6, r25	; 0x06
    2b9c:	8d 83       	std	Y+5, r24	; 0x05
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <H_EXT_EEPROM_void_Write+0x138>
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);
}
    2bb2:	62 96       	adiw	r28, 0x12	; 18
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <H_EXT_EEPROM_void_Read>:

/***************************************************************************/
u8   H_EXT_EEPROM_void_Read(u16 Copy_u16ByteNo,u8 EP_NUM)
{
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <H_EXT_EEPROM_void_Read+0x6>
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <H_EXT_EEPROM_void_Read+0x8>
    2bcc:	0f 92       	push	r0
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	9c 83       	std	Y+4, r25	; 0x04
    2bd4:	8b 83       	std	Y+3, r24	; 0x03
    2bd6:	6d 83       	std	Y+5, r22	; 0x05
	/*Copy_u16ByteNo ->user pass num between 0 and 1023
	 * EP_NUM EEPROM Number 0 or 1  for ex 1   */
	u8 data = 0;
    2bd8:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Data=0 ;
    2bda:	1a 82       	std	Y+2, r1	; 0x02


	data=M_TWI_u8_StartCondition();
    2bdc:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <M_TWI_u8_StartCondition>
    2be0:	89 83       	std	Y+1, r24	; 0x01
	data=M_TWI_u8_SendSlaveAddressWrite(EXT_EEPROM_ADDRESS_SEQ | (u8)(Copy_u16ByteNo>>8)|(EP_NUM<<2));
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	89 2f       	mov	r24, r25
    2be8:	99 27       	eor	r25, r25
    2bea:	80 65       	ori	r24, 0x50	; 80
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	88 2f       	mov	r24, r24
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	82 2b       	or	r24, r18
    2c00:	93 2b       	or	r25, r19
    2c02:	0e 94 3d 09 	call	0x127a	; 0x127a <M_TWI_u8_SendSlaveAddressWrite>
    2c06:	89 83       	std	Y+1, r24	; 0x01
	data=M_TWI_u8_SendByte((u8)Copy_u16ByteNo);
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	88 2f       	mov	r24, r24
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 ac 09 	call	0x1358	; 0x1358 <M_TWI_u8_SendByte>
    2c12:	89 83       	std	Y+1, r24	; 0x01
	data=M_TWI_u8_RepeatedStart();
    2c14:	0e 94 12 09 	call	0x1224	; 0x1224 <M_TWI_u8_RepeatedStart>
    2c18:	89 83       	std	Y+1, r24	; 0x01
	data=M_TWI_u8_SendSlaveAddressRead( EXT_EEPROM_ADDRESS_SEQ | (u8)(Copy_u16ByteNo>>8)|(EP_NUM<<2));
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	89 2f       	mov	r24, r25
    2c20:	99 27       	eor	r25, r25
    2c22:	80 65       	ori	r24, 0x50	; 80
    2c24:	28 2f       	mov	r18, r24
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	82 2b       	or	r24, r18
    2c38:	93 2b       	or	r25, r19
    2c3a:	0e 94 76 09 	call	0x12ec	; 0x12ec <M_TWI_u8_SendSlaveAddressRead>
    2c3e:	89 83       	std	Y+1, r24	; 0x01
	data=M_TWI_u8_ReadByte(&Local_u8Data);
    2c40:	ce 01       	movw	r24, r28
    2c42:	02 96       	adiw	r24, 0x02	; 2
    2c44:	0e 94 d6 09 	call	0x13ac	; 0x13ac <M_TWI_u8_ReadByte>
    2c48:	89 83       	std	Y+1, r24	; 0x01

	M_TWI_void_StopCondition();
    2c4a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <M_TWI_void_StopCondition>
	//_delay_ms(10);

	return Local_u8Data;
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <H_EXT_EEPROM_void_Write_Str>:

/***************************************************************************/
void H_EXT_EEPROM_void_Write_Str(u16 ByteNo , u8* DATA)
{
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <H_EXT_EEPROM_void_Write_Str+0x6>
    2c66:	00 d0       	rcall	.+0      	; 0x2c68 <H_EXT_EEPROM_void_Write_Str+0x8>
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <H_EXT_EEPROM_void_Write_Str+0xa>
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	9c 83       	std	Y+4, r25	; 0x04
    2c70:	8b 83       	std	Y+3, r24	; 0x03
    2c72:	7e 83       	std	Y+6, r23	; 0x06
    2c74:	6d 83       	std	Y+5, r22	; 0x05
	s8 i = -1 ;
    2c76:	8f ef       	ldi	r24, 0xFF	; 255
    2c78:	8a 83       	std	Y+2, r24	; 0x02
	u8 BN=ByteNo ;
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	89 83       	std	Y+1, r24	; 0x01
       BN--;
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	81 50       	subi	r24, 0x01	; 1
    2c82:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		i++ ;
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	8f 5f       	subi	r24, 0xFF	; 255
    2c88:	8a 83       	std	Y+2, r24	; 0x02
		BN++;
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	89 83       	std	Y+1, r24	; 0x01
		H_EXT_EEPROM_void_Write(BN , DATA[i],0);
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	48 2f       	mov	r20, r24
    2c94:	50 e0       	ldi	r21, 0x00	; 0
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	28 2f       	mov	r18, r24
    2c9a:	33 27       	eor	r19, r19
    2c9c:	27 fd       	sbrc	r18, 7
    2c9e:	30 95       	com	r19
    2ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	e2 0f       	add	r30, r18
    2ca8:	f3 1f       	adc	r31, r19
    2caa:	20 81       	ld	r18, Z
    2cac:	ca 01       	movw	r24, r20
    2cae:	62 2f       	mov	r22, r18
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <H_EXT_EEPROM_void_Write>

	}while( DATA[i] != '\0' ) ;
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	28 2f       	mov	r18, r24
    2cba:	33 27       	eor	r19, r19
    2cbc:	27 fd       	sbrc	r18, 7
    2cbe:	30 95       	com	r19
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	e2 0f       	add	r30, r18
    2cc8:	f3 1f       	adc	r31, r19
    2cca:	80 81       	ld	r24, Z
    2ccc:	88 23       	and	r24, r24
    2cce:	d1 f6       	brne	.-76     	; 0x2c84 <H_EXT_EEPROM_void_Write_Str+0x24>


}
    2cd0:	26 96       	adiw	r28, 0x06	; 6
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	cd bf       	out	0x3d, r28	; 61
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	08 95       	ret

00002ce2 <H_EXT_EEPROM_void_Read_Str>:

/***************************************************************************/
void H_EXT_EEPROM_void_Read_Str(u16 ByteNo , u8* DATA)
{
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <H_EXT_EEPROM_void_Read_Str+0xa>
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <H_EXT_EEPROM_void_Read_Str+0xc>
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <H_EXT_EEPROM_void_Read_Str+0xe>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	9c 83       	std	Y+4, r25	; 0x04
    2cf6:	8b 83       	std	Y+3, r24	; 0x03
    2cf8:	7e 83       	std	Y+6, r23	; 0x06
    2cfa:	6d 83       	std	Y+5, r22	; 0x05
	s8 i = -1 ;
    2cfc:	8f ef       	ldi	r24, 0xFF	; 255
    2cfe:	8a 83       	std	Y+2, r24	; 0x02
	u8 BN=ByteNo ;
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	89 83       	std	Y+1, r24	; 0x01
       BN--;
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	81 50       	subi	r24, 0x01	; 1
    2d08:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		i++ ;
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	8f 5f       	subi	r24, 0xFF	; 255
    2d0e:	8a 83       	std	Y+2, r24	; 0x02
		BN++;
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	8f 5f       	subi	r24, 0xFF	; 255
    2d14:	89 83       	std	Y+1, r24	; 0x01
		DATA[i]= H_EXT_EEPROM_void_Read(BN,0);
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	28 2f       	mov	r18, r24
    2d1a:	33 27       	eor	r19, r19
    2d1c:	27 fd       	sbrc	r18, 7
    2d1e:	30 95       	com	r19
    2d20:	8d 81       	ldd	r24, Y+5	; 0x05
    2d22:	9e 81       	ldd	r25, Y+6	; 0x06
    2d24:	8c 01       	movw	r16, r24
    2d26:	02 0f       	add	r16, r18
    2d28:	13 1f       	adc	r17, r19
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	60 e0       	ldi	r22, 0x00	; 0
    2d32:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <H_EXT_EEPROM_void_Read>
    2d36:	f8 01       	movw	r30, r16
    2d38:	80 83       	st	Z, r24


	}while( DATA[i] != '\0' ) ;
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	33 27       	eor	r19, r19
    2d40:	27 fd       	sbrc	r18, 7
    2d42:	30 95       	com	r19
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	fc 01       	movw	r30, r24
    2d4a:	e2 0f       	add	r30, r18
    2d4c:	f3 1f       	adc	r31, r19
    2d4e:	80 81       	ld	r24, Z
    2d50:	88 23       	and	r24, r24
    2d52:	d9 f6       	brne	.-74     	; 0x2d0a <H_EXT_EEPROM_void_Read_Str+0x28>


}
    2d54:	26 96       	adiw	r28, 0x06	; 6
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	1f 91       	pop	r17
    2d66:	0f 91       	pop	r16
    2d68:	08 95       	ret

00002d6a <main>:
#include "../MCAL/DIO/DIO_Interface.h"
#include "../HAL/LCD/LCD_Interface.h"
#include "../MCAL/I2C/TWI_int.h"

int main(void)
{
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	e2 97       	sbiw	r28, 0x32	; 50
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
	M_TWI_void_Init();
    2d7e:	0e 94 c0 08 	call	0x1180	; 0x1180 <M_TWI_void_Init>
	LCD_voidInit();
    2d82:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_voidInit>
	u8 i = 0;
    2d86:	1d 8e       	std	Y+29, r1	; 0x1d
	u8 ReceivedChar;
	u8 Message[20];
	M_TWI_u8_ReadByte(&ReceivedChar);
    2d88:	ce 01       	movw	r24, r28
    2d8a:	4e 96       	adiw	r24, 0x1e	; 30
    2d8c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <M_TWI_u8_ReadByte>
	LCD_voidWriteString("Amr Labib ");
    2d90:	80 e6       	ldi	r24, 0x60	; 96
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidWriteString>
    LCD_voidWriteString(ReceivedChar);
    2d98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d9a:	88 2f       	mov	r24, r24
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidWriteString>



	while(1)
	{
		i = 0;
    2da2:	1d 8e       	std	Y+29, r1	; 0x1d

		do {
			M_TWI_u8_ReadByte(&ReceivedChar);
    2da4:	ce 01       	movw	r24, r28
    2da6:	4e 96       	adiw	r24, 0x1e	; 30
    2da8:	0e 94 d6 09 	call	0x13ac	; 0x13ac <M_TWI_u8_ReadByte>
			Message[i] = ReceivedChar;
    2dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2db4:	ce 01       	movw	r24, r28
    2db6:	4f 96       	adiw	r24, 0x1f	; 31
    2db8:	fc 01       	movw	r30, r24
    2dba:	e2 0f       	add	r30, r18
    2dbc:	f3 1f       	adc	r31, r19
    2dbe:	40 83       	st	Z, r20
//			LCD_voidWriteData(ReceivedChar);
			LCD_voidWriteString(ReceivedChar);
    2dc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dc2:	88 2f       	mov	r24, r24
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidWriteString>
			i++;
    2dca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dcc:	8f 5f       	subi	r24, 0xFF	; 255
    2dce:	8d 8f       	std	Y+29, r24	; 0x1d
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	a8 ec       	ldi	r26, 0xC8	; 200
    2dd6:	b2 e4       	ldi	r27, 0x42	; 66
    2dd8:	89 8f       	std	Y+25, r24	; 0x19
    2dda:	9a 8f       	std	Y+26, r25	; 0x1a
    2ddc:	ab 8f       	std	Y+27, r26	; 0x1b
    2dde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de0:	69 8d       	ldd	r22, Y+25	; 0x19
    2de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	4a ef       	ldi	r20, 0xFA	; 250
    2dee:	54 e4       	ldi	r21, 0x44	; 68
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	8d 8b       	std	Y+21, r24	; 0x15
    2dfa:	9e 8b       	std	Y+22, r25	; 0x16
    2dfc:	af 8b       	std	Y+23, r26	; 0x17
    2dfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e00:	6d 89       	ldd	r22, Y+21	; 0x15
    2e02:	7e 89       	ldd	r23, Y+22	; 0x16
    2e04:	8f 89       	ldd	r24, Y+23	; 0x17
    2e06:	98 8d       	ldd	r25, Y+24	; 0x18
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e8       	ldi	r20, 0x80	; 128
    2e0e:	5f e3       	ldi	r21, 0x3F	; 63
    2e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e14:	88 23       	and	r24, r24
    2e16:	2c f4       	brge	.+10     	; 0x2e22 <main+0xb8>
		__ticks = 1;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	9c 8b       	std	Y+20, r25	; 0x14
    2e1e:	8b 8b       	std	Y+19, r24	; 0x13
    2e20:	3f c0       	rjmp	.+126    	; 0x2ea0 <main+0x136>
	else if (__tmp > 65535)
    2e22:	6d 89       	ldd	r22, Y+21	; 0x15
    2e24:	7e 89       	ldd	r23, Y+22	; 0x16
    2e26:	8f 89       	ldd	r24, Y+23	; 0x17
    2e28:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	3f ef       	ldi	r19, 0xFF	; 255
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	57 e4       	ldi	r21, 0x47	; 71
    2e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	4c f5       	brge	.+82     	; 0x2e8c <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	40 e2       	ldi	r20, 0x20	; 32
    2e48:	51 e4       	ldi	r21, 0x41	; 65
    2e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	bc 01       	movw	r22, r24
    2e54:	cd 01       	movw	r24, r26
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9c 8b       	std	Y+20, r25	; 0x14
    2e60:	8b 8b       	std	Y+19, r24	; 0x13
    2e62:	0f c0       	rjmp	.+30     	; 0x2e82 <main+0x118>
    2e64:	88 ec       	ldi	r24, 0xC8	; 200
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	9a 8b       	std	Y+18, r25	; 0x12
    2e6a:	89 8b       	std	Y+17, r24	; 0x11
    2e6c:	89 89       	ldd	r24, Y+17	; 0x11
    2e6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <main+0x106>
    2e74:	9a 8b       	std	Y+18, r25	; 0x12
    2e76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e78:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	9c 8b       	std	Y+20, r25	; 0x14
    2e80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e82:	8b 89       	ldd	r24, Y+19	; 0x13
    2e84:	9c 89       	ldd	r25, Y+20	; 0x14
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	69 f7       	brne	.-38     	; 0x2e64 <main+0xfa>
    2e8a:	14 c0       	rjmp	.+40     	; 0x2eb4 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e90:	8f 89       	ldd	r24, Y+23	; 0x17
    2e92:	98 8d       	ldd	r25, Y+24	; 0x18
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	9c 8b       	std	Y+20, r25	; 0x14
    2e9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ea0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ea2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ea4:	98 8b       	std	Y+16, r25	; 0x10
    2ea6:	8f 87       	std	Y+15, r24	; 0x0f
    2ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eaa:	98 89       	ldd	r25, Y+16	; 0x10
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <main+0x142>
    2eb0:	98 8b       	std	Y+16, r25	; 0x10
    2eb2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);

		} while (ReceivedChar != '\0' && i < sizeof(Message) - 1);
    2eb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2eb6:	88 23       	and	r24, r24
    2eb8:	21 f0       	breq	.+8      	; 0x2ec2 <main+0x158>
    2eba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ebc:	83 31       	cpi	r24, 0x13	; 19
    2ebe:	08 f4       	brcc	.+2      	; 0x2ec2 <main+0x158>
    2ec0:	71 cf       	rjmp	.-286    	; 0x2da4 <main+0x3a>

		Message[i] = '\0';
    2ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	ce 01       	movw	r24, r28
    2eca:	4f 96       	adiw	r24, 0x1f	; 31
    2ecc:	fc 01       	movw	r30, r24
    2ece:	e2 0f       	add	r30, r18
    2ed0:	f3 1f       	adc	r31, r19
    2ed2:	10 82       	st	Z, r1
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	aa e7       	ldi	r26, 0x7A	; 122
    2eda:	b4 e4       	ldi	r27, 0x44	; 68
    2edc:	8b 87       	std	Y+11, r24	; 0x0b
    2ede:	9c 87       	std	Y+12, r25	; 0x0c
    2ee0:	ad 87       	std	Y+13, r26	; 0x0d
    2ee2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4a ef       	ldi	r20, 0xFA	; 250
    2ef2:	54 e4       	ldi	r21, 0x44	; 68
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8f 83       	std	Y+7, r24	; 0x07
    2efe:	98 87       	std	Y+8, r25	; 0x08
    2f00:	a9 87       	std	Y+9, r26	; 0x09
    2f02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f04:	6f 81       	ldd	r22, Y+7	; 0x07
    2f06:	78 85       	ldd	r23, Y+8	; 0x08
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	5f e3       	ldi	r21, 0x3F	; 63
    2f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <main+0x1bc>
		__ticks = 1;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9e 83       	std	Y+6, r25	; 0x06
    2f22:	8d 83       	std	Y+5, r24	; 0x05
    2f24:	3f c0       	rjmp	.+126    	; 0x2fa4 <main+0x23a>
	else if (__tmp > 65535)
    2f26:	6f 81       	ldd	r22, Y+7	; 0x07
    2f28:	78 85       	ldd	r23, Y+8	; 0x08
    2f2a:	89 85       	ldd	r24, Y+9	; 0x09
    2f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	57 e4       	ldi	r21, 0x47	; 71
    2f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	4c f5       	brge	.+82     	; 0x2f90 <main+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	9e 83       	std	Y+6, r25	; 0x06
    2f64:	8d 83       	std	Y+5, r24	; 0x05
    2f66:	0f c0       	rjmp	.+30     	; 0x2f86 <main+0x21c>
    2f68:	88 ec       	ldi	r24, 0xC8	; 200
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	9c 83       	std	Y+4, r25	; 0x04
    2f6e:	8b 83       	std	Y+3, r24	; 0x03
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	9c 81       	ldd	r25, Y+4	; 0x04
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <main+0x20a>
    2f78:	9c 83       	std	Y+4, r25	; 0x04
    2f7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	9e 83       	std	Y+6, r25	; 0x06
    2f84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f86:	8d 81       	ldd	r24, Y+5	; 0x05
    2f88:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	69 f7       	brne	.-38     	; 0x2f68 <main+0x1fe>
    2f8e:	09 cf       	rjmp	.-494    	; 0x2da2 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa8:	9a 83       	std	Y+2, r25	; 0x02
    2faa:	89 83       	std	Y+1, r24	; 0x01
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <main+0x246>
    2fb4:	9a 83       	std	Y+2, r25	; 0x02
    2fb6:	89 83       	std	Y+1, r24	; 0x01
    2fb8:	f4 ce       	rjmp	.-536    	; 0x2da2 <main+0x38>

00002fba <__mulsi3>:
    2fba:	62 9f       	mul	r22, r18
    2fbc:	d0 01       	movw	r26, r0
    2fbe:	73 9f       	mul	r23, r19
    2fc0:	f0 01       	movw	r30, r0
    2fc2:	82 9f       	mul	r24, r18
    2fc4:	e0 0d       	add	r30, r0
    2fc6:	f1 1d       	adc	r31, r1
    2fc8:	64 9f       	mul	r22, r20
    2fca:	e0 0d       	add	r30, r0
    2fcc:	f1 1d       	adc	r31, r1
    2fce:	92 9f       	mul	r25, r18
    2fd0:	f0 0d       	add	r31, r0
    2fd2:	83 9f       	mul	r24, r19
    2fd4:	f0 0d       	add	r31, r0
    2fd6:	74 9f       	mul	r23, r20
    2fd8:	f0 0d       	add	r31, r0
    2fda:	65 9f       	mul	r22, r21
    2fdc:	f0 0d       	add	r31, r0
    2fde:	99 27       	eor	r25, r25
    2fe0:	72 9f       	mul	r23, r18
    2fe2:	b0 0d       	add	r27, r0
    2fe4:	e1 1d       	adc	r30, r1
    2fe6:	f9 1f       	adc	r31, r25
    2fe8:	63 9f       	mul	r22, r19
    2fea:	b0 0d       	add	r27, r0
    2fec:	e1 1d       	adc	r30, r1
    2fee:	f9 1f       	adc	r31, r25
    2ff0:	bd 01       	movw	r22, r26
    2ff2:	cf 01       	movw	r24, r30
    2ff4:	11 24       	eor	r1, r1
    2ff6:	08 95       	ret

00002ff8 <__udivmodsi4>:
    2ff8:	a1 e2       	ldi	r26, 0x21	; 33
    2ffa:	1a 2e       	mov	r1, r26
    2ffc:	aa 1b       	sub	r26, r26
    2ffe:	bb 1b       	sub	r27, r27
    3000:	fd 01       	movw	r30, r26
    3002:	0d c0       	rjmp	.+26     	; 0x301e <__udivmodsi4_ep>

00003004 <__udivmodsi4_loop>:
    3004:	aa 1f       	adc	r26, r26
    3006:	bb 1f       	adc	r27, r27
    3008:	ee 1f       	adc	r30, r30
    300a:	ff 1f       	adc	r31, r31
    300c:	a2 17       	cp	r26, r18
    300e:	b3 07       	cpc	r27, r19
    3010:	e4 07       	cpc	r30, r20
    3012:	f5 07       	cpc	r31, r21
    3014:	20 f0       	brcs	.+8      	; 0x301e <__udivmodsi4_ep>
    3016:	a2 1b       	sub	r26, r18
    3018:	b3 0b       	sbc	r27, r19
    301a:	e4 0b       	sbc	r30, r20
    301c:	f5 0b       	sbc	r31, r21

0000301e <__udivmodsi4_ep>:
    301e:	66 1f       	adc	r22, r22
    3020:	77 1f       	adc	r23, r23
    3022:	88 1f       	adc	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	1a 94       	dec	r1
    3028:	69 f7       	brne	.-38     	; 0x3004 <__udivmodsi4_loop>
    302a:	60 95       	com	r22
    302c:	70 95       	com	r23
    302e:	80 95       	com	r24
    3030:	90 95       	com	r25
    3032:	9b 01       	movw	r18, r22
    3034:	ac 01       	movw	r20, r24
    3036:	bd 01       	movw	r22, r26
    3038:	cf 01       	movw	r24, r30
    303a:	08 95       	ret

0000303c <__prologue_saves__>:
    303c:	2f 92       	push	r2
    303e:	3f 92       	push	r3
    3040:	4f 92       	push	r4
    3042:	5f 92       	push	r5
    3044:	6f 92       	push	r6
    3046:	7f 92       	push	r7
    3048:	8f 92       	push	r8
    304a:	9f 92       	push	r9
    304c:	af 92       	push	r10
    304e:	bf 92       	push	r11
    3050:	cf 92       	push	r12
    3052:	df 92       	push	r13
    3054:	ef 92       	push	r14
    3056:	ff 92       	push	r15
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
    3064:	ca 1b       	sub	r28, r26
    3066:	db 0b       	sbc	r29, r27
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	09 94       	ijmp

00003074 <__epilogue_restores__>:
    3074:	2a 88       	ldd	r2, Y+18	; 0x12
    3076:	39 88       	ldd	r3, Y+17	; 0x11
    3078:	48 88       	ldd	r4, Y+16	; 0x10
    307a:	5f 84       	ldd	r5, Y+15	; 0x0f
    307c:	6e 84       	ldd	r6, Y+14	; 0x0e
    307e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3080:	8c 84       	ldd	r8, Y+12	; 0x0c
    3082:	9b 84       	ldd	r9, Y+11	; 0x0b
    3084:	aa 84       	ldd	r10, Y+10	; 0x0a
    3086:	b9 84       	ldd	r11, Y+9	; 0x09
    3088:	c8 84       	ldd	r12, Y+8	; 0x08
    308a:	df 80       	ldd	r13, Y+7	; 0x07
    308c:	ee 80       	ldd	r14, Y+6	; 0x06
    308e:	fd 80       	ldd	r15, Y+5	; 0x05
    3090:	0c 81       	ldd	r16, Y+4	; 0x04
    3092:	1b 81       	ldd	r17, Y+3	; 0x03
    3094:	aa 81       	ldd	r26, Y+2	; 0x02
    3096:	b9 81       	ldd	r27, Y+1	; 0x01
    3098:	ce 0f       	add	r28, r30
    309a:	d1 1d       	adc	r29, r1
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	ed 01       	movw	r28, r26
    30a8:	08 95       	ret

000030aa <_exit>:
    30aa:	f8 94       	cli

000030ac <__stop_program>:
    30ac:	ff cf       	rjmp	.-2      	; 0x30ac <__stop_program>
